# Description: Allow the embedder to override the renderer compositor
#  settings
# Author: Chris Coulson <chris.coulson@canonical.com>

diff --git a/content/public/renderer/content_renderer_client.cc b/content/public/renderer/content_renderer_client.cc
--- a/content/public/renderer/content_renderer_client.cc
+++ b/content/public/renderer/content_renderer_client.cc
@@ -219,9 +219,12 @@ ContentRendererClient::CreateAppBannerCl
 blink::WebMediaPlayer* ContentRendererClient::OverrideWebMediaPlayer(
     blink::WebFrame* frame,
     blink::WebMediaPlayerClient* client,
     base::WeakPtr<media::WebMediaPlayerDelegate> delegate,
     media::MediaLog* media_log) {
   return nullptr;
 }
 
+void ContentRendererClient::OverrideCompositorSettings(
+    cc::LayerTreeSettings* settings) {}
+
 }  // namespace content
diff --git a/content/public/renderer/content_renderer_client.h b/content/public/renderer/content_renderer_client.h
--- a/content/public/renderer/content_renderer_client.h
+++ b/content/public/renderer/content_renderer_client.h
@@ -50,16 +50,20 @@ class WebSpeechSynthesizerClient;
 class WebThemeEngine;
 class WebURLResponse;
 class WebURLRequest;
 class WebWorkerContentSettingsClientProxy;
 struct WebPluginParams;
 struct WebURLError;
 }
 
+namespace cc {
+class LayerTreeSettings;
+}
+
 namespace media {
 class GpuVideoAcceleratorFactories;
 class MediaLog;
 class RendererFactory;
 class WebMediaPlayerDelegate;
 struct KeySystemInfo;
 }
 
@@ -314,13 +318,16 @@ class CONTENT_EXPORT ContentRendererClie
   virtual void WillDestroyServiceWorkerContextOnWorkerThread(const GURL& url) {}
 
   // Allow overriding default media player
   virtual blink::WebMediaPlayer* OverrideWebMediaPlayer(
       blink::WebFrame* frame,
       blink::WebMediaPlayerClient* client,
       base::WeakPtr<media::WebMediaPlayerDelegate> delegate,
       media::MediaLog* media_log);
+
+  // Allow overriding the renderer compositor settings
+  virtual void OverrideCompositorSettings(cc::LayerTreeSettings* settings);
 };
 
 }  // namespace content
 
 #endif  // CONTENT_PUBLIC_RENDERER_CONTENT_RENDERER_CLIENT_H_
diff --git a/content/renderer/gpu/render_widget_compositor.cc b/content/renderer/gpu/render_widget_compositor.cc
--- a/content/renderer/gpu/render_widget_compositor.cc
+++ b/content/renderer/gpu/render_widget_compositor.cc
@@ -34,17 +34,19 @@
 #include "cc/output/swap_promise.h"
 #include "cc/resources/single_release_callback.h"
 #include "cc/scheduler/begin_frame_source.h"
 #include "cc/trees/latency_info_swap_promise_monitor.h"
 #include "cc/trees/layer_tree_host.h"
 #include "components/scheduler/renderer/renderer_scheduler.h"
 #include "content/common/content_switches_internal.h"
 #include "content/common/gpu/client/context_provider_command_buffer.h"
+#include "content/public/common/content_client.h"
 #include "content/public/common/content_switches.h"
+#include "content/public/renderer/content_renderer_client.h"
 #include "content/renderer/input/input_handler_manager.h"
 #include "gpu/command_buffer/client/gles2_interface.h"
 #include "third_party/WebKit/public/platform/WebCompositeAndReadbackAsyncCallback.h"
 #include "third_party/WebKit/public/platform/WebLayoutAndPaintAsyncCallback.h"
 #include "third_party/WebKit/public/platform/WebSize.h"
 #include "third_party/WebKit/public/web/WebKit.h"
 #include "third_party/WebKit/public/web/WebRuntimeFeatures.h"
 #include "third_party/WebKit/public/web/WebSelection.h"
@@ -475,16 +477,18 @@ void RenderWidgetCompositor::Initialize(
     settings.use_external_begin_frame_source = false;
   }
 
   settings.max_staging_buffers = 32;
   // Use 1/4th of staging buffers on low-end devices.
   if (base::SysInfo::IsLowEndDevice())
     settings.max_staging_buffers /= 4;
 
+  GetContentClient()->renderer()->OverrideCompositorSettings(&settings);
+
   scoped_refptr<base::SingleThreadTaskRunner> compositor_thread_task_runner =
       compositor_deps_->GetCompositorImplThreadTaskRunner();
   scoped_refptr<base::SingleThreadTaskRunner>
       main_thread_compositor_task_runner =
           compositor_deps_->GetCompositorMainThreadTaskRunner();
   cc::SharedBitmapManager* shared_bitmap_manager =
       compositor_deps_->GetSharedBitmapManager();
   gpu::GpuMemoryBufferManager* gpu_memory_buffer_manager =
