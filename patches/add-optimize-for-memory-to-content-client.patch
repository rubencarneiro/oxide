# Description: Add API to ContentClient to allow the content layer to ask
#  the embedder if it should optimize for memory usage
# Author: Chris Coulson <chris.coulson@canonical.com>

diff --git a/content/public/common/content_client.cc b/content/public/common/content_client.cc
--- a/content/public/common/content_client.cc
+++ b/content/public/common/content_client.cc
@@ -107,9 +107,17 @@ std::string ContentClient::GetProcessTyp
 #if defined(OS_MACOSX) && !defined(OS_IOS)
 bool ContentClient::GetSandboxProfileForSandboxType(
     int sandbox_type,
     int* sandbox_profile_resource_id) const {
   return false;
 }
 #endif
 
+bool ContentClient::ShouldOptimizeForMemoryUsage() const {
+#if defined(OS_ANDROID)
+  return true;
+#else
+  return false;
+#endif
+}
+
 }  // namespace content
diff --git a/content/public/common/content_client.h b/content/public/common/content_client.h
--- a/content/public/common/content_client.h
+++ b/content/public/common/content_client.h
@@ -142,16 +142,20 @@ class CONTENT_EXPORT ContentClient {
   virtual void AddSecureSchemesAndOrigins(std::set<std::string>* schemes,
                                           std::set<GURL>* origins) {}
 
   // Gives the embedder a chance to register additional schemes that
   // should be allowed to register service workers. Only secure and
   // trustworthy schemes should be added.
   virtual void AddServiceWorkerSchemes(std::set<std::string>* schemes) {}
 
+  // Let the embedder control whether content should optimize for memory
+  // consumption (eg, limiting decoded image size)
+  virtual bool ShouldOptimizeForMemoryUsage() const;
+
  private:
   friend class ContentClientInitializer;  // To set these pointers.
   friend class InternalTestInitializer;
 
   // The embedder API for participating in browser logic.
   ContentBrowserClient* browser_;
   // The embedder API for participating in plugin logic.
   ContentPluginClient* plugin_;
