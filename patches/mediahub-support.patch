diff --git a/content/public/renderer/content_renderer_client.cc b/content/public/renderer/content_renderer_client.cc
--- a/content/public/renderer/content_renderer_client.cc
+++ b/content/public/renderer/content_renderer_client.cc
@@ -220,9 +220,17 @@ scoped_ptr<blink::WebAppBannerClient>
 ContentRendererClient::CreateAppBannerClient(RenderFrame* render_frame) {
   return nullptr;
 }
 
 bool ContentRendererClient::ShouldEnforceWebRTCRoutingPreferences() {
   return true;
 }
 
+blink::WebMediaPlayer* ContentRendererClient::OverrideWebMediaPlayer(
+    blink::WebFrame* frame,
+    blink::WebMediaPlayerClient* client,
+    base::WeakPtr<media::WebMediaPlayerDelegate> delegate,
+    media::MediaLog* media_log) {
+  return nullptr;
+}
+
 }  // namespace content
diff --git a/content/public/renderer/content_renderer_client.h b/content/public/renderer/content_renderer_client.h
--- a/content/public/renderer/content_renderer_client.h
+++ b/content/public/renderer/content_renderer_client.h
@@ -32,16 +32,18 @@ class SingleThreadTaskRunner;
 namespace blink {
 class WebAppBannerClient;
 class WebAudioDevice;
 class WebClipboard;
 class WebFrame;
 class WebLocalFrame;
 class WebMIDIAccessor;
 class WebMIDIAccessorClient;
+class WebMediaPlayer;
+class WebMediaPlayerClient;
 class WebMediaStreamCenter;
 class WebMediaStreamCenterClient;
 class WebPlugin;
 class WebPluginContainer;
 class WebPrescientNetworking;
 class WebRTCPeerConnectionHandler;
 class WebRTCPeerConnectionHandlerClient;
 class WebSpeechSynthesizer;
@@ -53,16 +55,17 @@ class WebWorkerContentSettingsClientProx
 struct WebPluginParams;
 struct WebURLError;
 }
 
 namespace media {
 class GpuVideoAcceleratorFactories;
 class MediaLog;
 class RendererFactory;
+class WebMediaPlayerDelegate;
 struct KeySystemInfo;
 }
 
 namespace content {
 class BrowserPluginDelegate;
 class DocumentState;
 class MediaStreamRendererFactory;
 class RenderFrame;
@@ -318,13 +321,20 @@ class CONTENT_EXPORT ContentRendererClie
   // is called from the worker thread.
   virtual void WillDestroyServiceWorkerContextOnWorkerThread(
       v8::Local<v8::Context> context,
       const GURL& url) {}
 
   // Whether this renderer should enforce preferences related to the WebRTC
   // routing logic, i.e. allowing multiple routes and non-proxied UDP.
   virtual bool ShouldEnforceWebRTCRoutingPreferences();
+
+  // Allow overriding default media player
+  virtual blink::WebMediaPlayer* OverrideWebMediaPlayer(
+      blink::WebFrame* frame,
+      blink::WebMediaPlayerClient* client,
+      base::WeakPtr<media::WebMediaPlayerDelegate> delegate,
+      media::MediaLog* media_log);
 };
 
 }  // namespace content
 
 #endif  // CONTENT_PUBLIC_RENDERER_CONTENT_RENDERER_CLIENT_H_
diff --git a/content/renderer/render_frame_impl.cc b/content/renderer/render_frame_impl.cc
--- a/content/renderer/render_frame_impl.cc
+++ b/content/renderer/render_frame_impl.cc
@@ -2087,16 +2087,27 @@ blink::WebMediaPlayer* RenderFrameImpl::
 #else
   scoped_refptr<media::AudioRendererSink> audio_renderer_sink =
       render_thread->GetAudioRendererMixerManager()->CreateInput(routing_id_);
   media::WebMediaPlayerParams::Context3DCB context_3d_cb =
       base::Bind(&GetSharedMainThreadContext3D);
 #endif  // defined(OS_ANDROID) && !defined(ENABLE_MEDIA_PIPELINE_ON_ANDROID)
 
   scoped_refptr<media::MediaLog> media_log(new RenderMediaLog());
+
+  blink::WebMediaPlayer* media_player = 
+      GetContentClient()->renderer()->OverrideWebMediaPlayer(
+        frame_,
+        client,
+        weak_factory_.GetWeakPtr(),
+        media_log.get());
+
+  if (media_player)
+    return media_player;
+
   media::WebMediaPlayerParams params(
       base::Bind(&ContentRendererClient::DeferMediaLoad,
                  base::Unretained(GetContentClient()->renderer()),
                  static_cast<RenderFrame*>(this), has_played_media_),
       audio_renderer_sink, media_log, render_thread->GetMediaThreadTaskRunner(),
       render_thread->GetWorkerTaskRunner(),
       render_thread->compositor_task_runner(), context_3d_cb,
       GetMediaPermission(), initial_cdm);
