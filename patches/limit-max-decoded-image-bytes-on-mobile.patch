# Description: Add --limit-max-decoded-image-bytes to content so that we can
#  limit for the maximum decoded image size on mobile
# Author: Chris Coulson <chris.coulson@canonical.com>

diff --git a/content/child/blink_platform_impl.cc b/content/child/blink_platform_impl.cc
--- a/content/child/blink_platform_impl.cc
+++ b/content/child/blink_platform_impl.cc
@@ -1319,33 +1319,33 @@ bool BlinkPlatformImpl::memoryAllocatorW
 }
 
 blink::WebDiscardableMemory*
 BlinkPlatformImpl::allocateAndLockDiscardableMemory(size_t bytes) {
   return content::WebDiscardableMemoryImpl::CreateLockedMemory(bytes).release();
 }
 
 size_t BlinkPlatformImpl::maxDecodedImageBytes() {
-#if defined(OS_ANDROID)
+  if (!GetContentClient()->ShouldOptimizeForMemoryUsage()) {
+    return noDecodedImageByteLimit;
+  }
+
   if (base::SysInfo::IsLowEndDevice()) {
     // Limit image decoded size to 3M pixels on low end devices.
     // 4 is maximum number of bytes per pixel.
     return 3 * 1024 * 1024 * 4;
   }
   // For other devices, limit decoded image size based on the amount of physical
   // memory.
   // In some cases all physical memory is not accessible by Chromium, as it can
   // be reserved for direct use by certain hardware. Thus, we set the limit so
   // that 1.6GB of reported physical memory on a 2GB device is enough to set the
   // limit at 16M pixels, which is a desirable value since 4K*4K is a relatively
   // common texture size.
   return base::SysInfo::AmountOfPhysicalMemory() / 25;
-#else
-  return noDecodedImageByteLimit;
-#endif
 }
 
 uint32_t BlinkPlatformImpl::getUniqueIdForProcess() {
   // TODO(rickyz): Replace this with base::GetUniqueIdForProcess when that's
   // ready.
   return base::trace_event::TraceLog::GetInstance()->process_id();
 }
 
