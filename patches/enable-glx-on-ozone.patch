# Description: Ozone builds of Chromium only support EGL, so add back support
#  for GLX, which is needed to share GL resources with Qt on X11
# Author: Chris Coulson <chris.coulson@canonical.com>

diff --git a/build/linux/system.gyp b/build/linux/system.gyp
--- a/build/linux/system.gyp
+++ b/build/linux/system.gyp
@@ -106,52 +106,16 @@
           ],
         },
       ],  # targets
     }],
     [ 'use_x11==1 or ozone_platform_ozonex==1', {
       # Hide X11 and related dependencies when use_x11=0
       'targets': [
         {
-          'target_name': 'x11',
-          'type': 'none',
-          'toolsets': ['host', 'target'],
-          'conditions': [
-            ['_toolset=="target"', {
-              'direct_dependent_settings': {
-                'cflags': [
-                  '<!@(<(pkg-config) --cflags x11)',
-                ],
-              },
-              'link_settings': {
-                'ldflags': [
-                  '<!@(<(pkg-config) --libs-only-L --libs-only-other x11 xi)',
-                ],
-                'libraries': [
-                  '<!@(<(pkg-config) --libs-only-l x11 xi)',
-                ],
-              },
-            }, {
-              'direct_dependent_settings': {
-                'cflags': [
-                  '<!@(pkg-config --cflags x11)',
-                ],
-              },
-              'link_settings': {
-                'ldflags': [
-                  '<!@(pkg-config --libs-only-L --libs-only-other x11 xi)',
-                ],
-                'libraries': [
-                  '<!@(pkg-config --libs-only-l x11 xi)',
-                ],
-              },
-            }],
-          ],
-        },
-        {
           'target_name': 'xcursor',
           'type': 'none',
           'direct_dependent_settings': {
             'cflags': [
               '<!@(<(pkg-config) --cflags xcursor)',
             ],
           },
           'link_settings': {
@@ -159,33 +123,16 @@
               '<!@(<(pkg-config) --libs-only-L --libs-only-other xcursor)',
             ],
             'libraries': [
               '<!@(<(pkg-config) --libs-only-l xcursor)',
             ],
           },
         },
         {
-          'target_name': 'xcomposite',
-          'type': 'none',
-          'direct_dependent_settings': {
-            'cflags': [
-              '<!@(<(pkg-config) --cflags xcomposite)',
-            ],
-          },
-          'link_settings': {
-            'ldflags': [
-              '<!@(<(pkg-config) --libs-only-L --libs-only-other xcomposite)',
-            ],
-            'libraries': [
-              '<!@(<(pkg-config) --libs-only-l xcomposite)',
-            ],
-          },
-        },
-        {
           'target_name': 'xdamage',
           'type': 'none',
           'direct_dependent_settings': {
             'cflags': [
               '<!@(<(pkg-config) --cflags xdamage)',
             ],
           },
           'link_settings': {
@@ -193,33 +140,16 @@
               '<!@(<(pkg-config) --libs-only-L --libs-only-other xdamage)',
             ],
             'libraries': [
               '<!@(<(pkg-config) --libs-only-l xdamage)',
             ],
           },
         },
         {
-          'target_name': 'xext',
-          'type': 'none',
-          'direct_dependent_settings': {
-            'cflags': [
-              '<!@(<(pkg-config) --cflags xext)',
-            ],
-          },
-          'link_settings': {
-            'ldflags': [
-              '<!@(<(pkg-config) --libs-only-L --libs-only-other xext)',
-            ],
-            'libraries': [
-              '<!@(<(pkg-config) --libs-only-l xext)',
-            ],
-          },
-        },
-        {
           'target_name': 'xfixes',
           'type': 'none',
           'direct_dependent_settings': {
             'cflags': [
               '<!@(<(pkg-config) --cflags xfixes)',
             ],
           },
           'link_settings': {
@@ -1024,16 +954,86 @@
                 ],
               },
             }],
           ]
         }],
       ],
     },
     {
+      'target_name': 'x11',
+      'type': 'none',
+      'toolsets': ['host', 'target'],
+      'conditions': [
+        ['_toolset=="target"', {
+          'direct_dependent_settings': {
+            'cflags': [
+              '<!@(<(pkg-config) --cflags x11)',
+            ],
+          },
+          'link_settings': {
+            'ldflags': [
+              '<!@(<(pkg-config) --libs-only-L --libs-only-other x11 xi)',
+            ],
+            'libraries': [
+              '<!@(<(pkg-config) --libs-only-l x11 xi)',
+            ],
+          },
+        }, {
+          'direct_dependent_settings': {
+            'cflags': [
+             '<!@(pkg-config --cflags x11)',
+            ],
+          },
+          'link_settings': {
+            'ldflags': [
+              '<!@(pkg-config --libs-only-L --libs-only-other x11 xi)',
+            ],
+            'libraries': [
+              '<!@(pkg-config --libs-only-l x11 xi)',
+            ],
+          },
+        }],
+      ],
+    },
+    {
+      'target_name': 'xcomposite',
+      'type': 'none',
+      'direct_dependent_settings': {
+        'cflags': [
+          '<!@(<(pkg-config) --cflags xcomposite)',
+        ],
+      },
+      'link_settings': {
+        'ldflags': [
+          '<!@(<(pkg-config) --libs-only-L --libs-only-other xcomposite)',
+        ],
+        'libraries': [
+          '<!@(<(pkg-config) --libs-only-l xcomposite)',
+        ],
+      },
+    },
+    {
+      'target_name': 'xext',
+      'type': 'none',
+      'direct_dependent_settings': {
+        'cflags': [
+          '<!@(<(pkg-config) --cflags xext)',
+        ],
+      },
+      'link_settings': {
+        'ldflags': [
+          '<!@(<(pkg-config) --libs-only-L --libs-only-other xext)',
+        ],
+        'libraries': [
+          '<!@(<(pkg-config) --libs-only-l xext)',
+        ],
+      },
+    },
+    {
       'target_name': 'udev',
       'type': 'none',
       'conditions': [
         # libudev is not available on *BSD
         ['_toolset=="target" and os_bsd!=1 and use_udev==1', {
           'direct_dependent_settings': {
             'cflags': [
               '<!@(<(pkg-config) --cflags libudev)'
diff --git a/ui/gfx/gfx.gyp b/ui/gfx/gfx.gyp
--- a/ui/gfx/gfx.gyp
+++ b/ui/gfx/gfx.gyp
@@ -381,17 +381,17 @@
           'sources!': [
             'render_text.cc',
             'render_text.h',
             'render_text_harfbuzz.cc',
             'render_text_harfbuzz.h',
             'text_utils_skia.cc',
           ],
         }],
-        ['use_x11==1', {
+        ['OS == "linux"', {
           'dependencies': [
             '../../build/linux/system.gyp:x11',
             'x/gfx_x11.gyp:gfx_x11',
           ],
         }],
         ['use_pango==1', {
           'dependencies': [
             '<(DEPTH)/build/linux/system.gyp:pangocairo',
diff --git a/ui/gfx/x/x11_types.cc b/ui/gfx/x/x11_types.cc
--- a/ui/gfx/x/x11_types.cc
+++ b/ui/gfx/x/x11_types.cc
@@ -4,24 +4,23 @@
 
 #include "ui/gfx/x/x11_types.h"
 
 #include <X11/Xlib.h>
 
 #include "base/command_line.h"
 #include "base/message_loop/message_loop.h"
 #include "ui/gfx/x/x11_switches.h"
+#include "ui/ozone/public/surface_factory_ozone.h"
 
 namespace gfx {
 
 XDisplay* GetXDisplay() {
-  static XDisplay* display = NULL;
-  if (!display)
-    display = OpenNewXDisplay();
-  return display;
+  return reinterpret_cast<Display *>(
+      ui::SurfaceFactoryOzone::GetInstance()->GetNativeDisplay());
 }
 
 XDisplay* OpenNewXDisplay() {
 #if defined(OS_CHROMEOS)
   return XOpenDisplay(NULL);
 #else
   std::string display_str = base::CommandLine::ForCurrentProcess()->
                             GetSwitchValueASCII(switches::kX11Display);
diff --git a/ui/gl/gl.gyp b/ui/gl/gl.gyp
--- a/ui/gl/gl.gyp
+++ b/ui/gl/gl.gyp
@@ -196,24 +196,24 @@
         ],
         }],
         ['OS in ("android", "linux")', {
           'sources': [
             'gl_implementation_osmesa.cc',
             'gl_implementation_osmesa.h',
           ],
         }],
-        ['use_x11 == 1', {
+        ['OS == "linux"', {
           'sources': [
             'gl_context_glx.cc',
             'gl_context_glx.h',
             'gl_glx_api_implementation.cc',
             'gl_glx_api_implementation.h',
-            'gl_image_glx.cc',
-            'gl_image_glx.h',
+            #'gl_image_glx.cc',
+            #'gl_image_glx.h',
             'gl_surface_glx.cc',
             'gl_surface_glx.h',
             'gl_egl_api_implementation.cc',
             'gl_egl_api_implementation.h',
             '<(gl_binding_output_dir)/gl_bindings_autogen_glx.cc',
             '<(gl_binding_output_dir)/gl_bindings_autogen_glx.h',
           ],
           'all_dependent_settings': {
diff --git a/ui/gl/gl_bindings.h b/ui/gl/gl_bindings.h
--- a/ui/gl/gl_bindings.h
+++ b/ui/gl/gl_bindings.h
@@ -20,17 +20,17 @@
 #include "build/build_config.h"
 #include "ui/gl/gl_export.h"
 
 // The standard OpenGL native extension headers are also included.
 #if defined(OS_WIN)
 #include <GL/wglext.h>
 #elif defined(OS_MACOSX)
 #include <OpenGL/OpenGL.h>
-#elif defined(USE_X11)
+#elif defined(OS_LINUX)
 #include <GL/glx.h>
 #include <GL/glxext.h>
 
 // Undefine some macros defined by X headers. This is why this file should only
 // be included in .cc files.
 #undef Bool
 #undef None
 #undef Status
@@ -241,16 +241,19 @@ typedef uint64 EGLuint64CHROMIUM;
 #if defined(OS_WIN)
 #include "gl_bindings_autogen_egl.h"
 #include "gl_bindings_autogen_wgl.h"
 #elif defined(USE_X11)
 #include "gl_bindings_autogen_egl.h"
 #include "gl_bindings_autogen_glx.h"
 #elif defined(USE_OZONE)
 #include "gl_bindings_autogen_egl.h"
+#if defined(OS_LINUX)
+#include "gl_bindings_autogen_glx.h"
+#endif
 #elif defined(OS_ANDROID)
 #include "gl_bindings_autogen_egl.h"
 #endif
 
 namespace gfx {
 
 struct GL_EXPORT DriverGL {
   void InitializeStaticBindings();
@@ -304,17 +307,17 @@ struct GL_EXPORT DriverEGL {
   void ClearBindings();
 
   ProcsEGL fn;
   ProcsEGL debug_fn;
   ExtensionsEGL ext;
 };
 #endif
 
-#if defined(USE_X11)
+#if defined(OS_LINUX)
 struct GL_EXPORT DriverGLX {
   void InitializeStaticBindings();
   void InitializeDynamicBindings(GLContext* context);
   void InitializeDebugBindings();
   void ClearBindings();
 
   ProcsGLX fn;
   ProcsGLX debug_fn;
@@ -344,16 +347,23 @@ GL_EXPORT extern GLXApi* g_current_glx_c
 GL_EXPORT extern DriverEGL g_driver_egl;
 GL_EXPORT extern DriverGLX g_driver_glx;
 
 #elif defined(USE_OZONE)
 
 GL_EXPORT extern EGLApi* g_current_egl_context;
 GL_EXPORT extern DriverEGL g_driver_egl;
 
+#if defined(OS_LINUX)
+
+GL_EXPORT extern GLXApi* g_current_glx_context;
+GL_EXPORT extern DriverGLX g_driver_glx;
+
+#endif
+
 #elif defined(OS_ANDROID)
 
 GL_EXPORT extern EGLApi* g_current_egl_context;
 GL_EXPORT extern DriverEGL g_driver_egl;
 
 #endif
 
 }  // namespace gfx
diff --git a/ui/gl/gl_implementation.cc b/ui/gl/gl_implementation.cc
--- a/ui/gl/gl_implementation.cc
+++ b/ui/gl/gl_implementation.cc
@@ -59,16 +59,19 @@ WGLApi* g_current_wgl_context;
 #elif defined(USE_X11)
 
 EGLApi* g_current_egl_context;
 GLXApi* g_current_glx_context;
 
 #elif defined(USE_OZONE)
 
 EGLApi* g_current_egl_context;
+#if defined(OS_LINUX)
+GLXApi* g_current_glx_context;
+#endif
 
 #elif defined(OS_ANDROID)
 
 EGLApi* g_current_egl_context;
 
 #endif
 
 GLImplementation GetNamedGLImplementation(const std::string& name) {
diff --git a/ui/gl/gl_surface_glx.cc b/ui/gl/gl_surface_glx.cc
--- a/ui/gl/gl_surface_glx.cc
+++ b/ui/gl/gl_surface_glx.cc
@@ -385,16 +385,17 @@ bool GLSurfaceGLX::IsOMLSyncControlSuppo
 }
 
 void* GLSurfaceGLX::GetDisplay() {
   return g_display;
 }
 
 GLSurfaceGLX::~GLSurfaceGLX() {}
 
+#if 0
 NativeViewGLSurfaceGLX::NativeViewGLSurfaceGLX(gfx::AcceleratedWidget window)
   : parent_window_(window),
     window_(0),
     config_(NULL) {
 }
 
 gfx::AcceleratedWidget NativeViewGLSurfaceGLX::GetDrawableHandle() const {
   return window_;
@@ -572,16 +573,17 @@ bool NativeViewGLSurfaceGLX::PostSubBuff
 
 VSyncProvider* NativeViewGLSurfaceGLX::GetVSyncProvider() {
   return vsync_provider_.get();
 }
 
 NativeViewGLSurfaceGLX::~NativeViewGLSurfaceGLX() {
   Destroy();
 }
+#endif
 
 PbufferGLSurfaceGLX::PbufferGLSurfaceGLX(const gfx::Size& size)
   : size_(size),
     config_(NULL),
     pbuffer_(0) {
   // Some implementations of Pbuffer do not support having a 0 size. For such
   // cases use a (1, 1) surface.
   if (size_.GetArea() == 0)
diff --git a/ui/gl/gl_surface_glx.h b/ui/gl/gl_surface_glx.h
--- a/ui/gl/gl_surface_glx.h
+++ b/ui/gl/gl_surface_glx.h
@@ -43,16 +43,17 @@ class GL_EXPORT GLSurfaceGLX : public GL
 
  protected:
   virtual ~GLSurfaceGLX();
 
  private:
   DISALLOW_COPY_AND_ASSIGN(GLSurfaceGLX);
 };
 
+#if 0
 // A surface used to render to a view.
 class GL_EXPORT NativeViewGLSurfaceGLX : public GLSurfaceGLX,
                                          public ui::PlatformEventDispatcher {
  public:
   explicit NativeViewGLSurfaceGLX(gfx::AcceleratedWidget window);
 
   // Implement GLSurfaceGLX.
   virtual bool Initialize() OVERRIDE;
@@ -86,16 +87,17 @@ class GL_EXPORT NativeViewGLSurfaceGLX :
 
   void* config_;
   gfx::Size size_;
 
   scoped_ptr<VSyncProvider> vsync_provider_;
 
   DISALLOW_COPY_AND_ASSIGN(NativeViewGLSurfaceGLX);
 };
+#endif
 
 // A surface used to render to an offscreen pbuffer.
 class GL_EXPORT PbufferGLSurfaceGLX : public GLSurfaceGLX {
  public:
   explicit PbufferGLSurfaceGLX(const gfx::Size& size);
 
   // Implement GLSurfaceGLX.
   virtual bool Initialize() OVERRIDE;
