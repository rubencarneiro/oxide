# Description: Ozone builds of Chromium only support EGL, so add back support
#  for GLX, which is needed to share GL resources with Qt on X11
# Author: Chris Coulson <chris.coulson@canonical.com>

diff --git a/build/linux/system.gyp b/build/linux/system.gyp
--- a/build/linux/system.gyp
+++ b/build/linux/system.gyp
@@ -110,52 +110,16 @@
           ],
         },
       ],  # targets
     }],
     [ 'use_x11==1', {
       # Hide X11 and related dependencies when use_x11=0
       'targets': [
         {
-          'target_name': 'x11',
-          'type': 'none',
-          'toolsets': ['host', 'target'],
-          'conditions': [
-            ['_toolset=="target"', {
-              'direct_dependent_settings': {
-                'cflags': [
-                  '<!@(<(pkg-config) --cflags x11)',
-                ],
-              },
-              'link_settings': {
-                'ldflags': [
-                  '<!@(<(pkg-config) --libs-only-L --libs-only-other x11 xi)',
-                ],
-                'libraries': [
-                  '<!@(<(pkg-config) --libs-only-l x11 xi)',
-                ],
-              },
-            }, {
-              'direct_dependent_settings': {
-                'cflags': [
-                  '<!@(pkg-config --cflags x11)',
-                ],
-              },
-              'link_settings': {
-                'ldflags': [
-                  '<!@(pkg-config --libs-only-L --libs-only-other x11 xi)',
-                ],
-                'libraries': [
-                  '<!@(pkg-config --libs-only-l x11 xi)',
-                ],
-              },
-            }],
-          ],
-        },
-        {
           'target_name': 'xcursor',
           'type': 'none',
           'direct_dependent_settings': {
             'cflags': [
               '<!@(<(pkg-config) --cflags xcursor)',
             ],
           },
           'link_settings': {
@@ -163,33 +127,16 @@
               '<!@(<(pkg-config) --libs-only-L --libs-only-other xcursor)',
             ],
             'libraries': [
               '<!@(<(pkg-config) --libs-only-l xcursor)',
             ],
           },
         },
         {
-          'target_name': 'xcomposite',
-          'type': 'none',
-          'direct_dependent_settings': {
-            'cflags': [
-              '<!@(<(pkg-config) --cflags xcomposite)',
-            ],
-          },
-          'link_settings': {
-            'ldflags': [
-              '<!@(<(pkg-config) --libs-only-L --libs-only-other xcomposite)',
-            ],
-            'libraries': [
-              '<!@(<(pkg-config) --libs-only-l xcomposite)',
-            ],
-          },
-        },
-        {
           'target_name': 'xdamage',
           'type': 'none',
           'direct_dependent_settings': {
             'cflags': [
               '<!@(<(pkg-config) --cflags xdamage)',
             ],
           },
           'link_settings': {
@@ -197,33 +144,16 @@
               '<!@(<(pkg-config) --libs-only-L --libs-only-other xdamage)',
             ],
             'libraries': [
               '<!@(<(pkg-config) --libs-only-l xdamage)',
             ],
           },
         },
         {
-          'target_name': 'xext',
-          'type': 'none',
-          'direct_dependent_settings': {
-            'cflags': [
-              '<!@(<(pkg-config) --cflags xext)',
-            ],
-          },
-          'link_settings': {
-            'ldflags': [
-              '<!@(<(pkg-config) --libs-only-L --libs-only-other xext)',
-            ],
-            'libraries': [
-              '<!@(<(pkg-config) --libs-only-l xext)',
-            ],
-          },
-        },
-        {
           'target_name': 'xfixes',
           'type': 'none',
           'direct_dependent_settings': {
             'cflags': [
               '<!@(<(pkg-config) --cflags xfixes)',
             ],
           },
           'link_settings': {
@@ -1023,16 +953,86 @@
                 ],
               },
             }],
           ]
         }],
       ],
     },
     {
+      'target_name': 'x11',
+      'type': 'none',
+      'toolsets': ['host', 'target'],
+      'conditions': [
+        ['_toolset=="target"', {
+          'direct_dependent_settings': {
+            'cflags': [
+              '<!@(<(pkg-config) --cflags x11)',
+            ],
+          },
+          'link_settings': {
+            'ldflags': [
+              '<!@(<(pkg-config) --libs-only-L --libs-only-other x11 xi)',
+            ],
+            'libraries': [
+              '<!@(<(pkg-config) --libs-only-l x11 xi)',
+            ],
+          },
+        }, {
+          'direct_dependent_settings': {
+            'cflags': [
+              '<!@(pkg-config --cflags x11)',
+            ],
+          },
+          'link_settings': {
+            'ldflags': [
+              '<!@(pkg-config --libs-only-L --libs-only-other x11 xi)',
+            ],
+            'libraries': [
+              '<!@(pkg-config --libs-only-l x11 xi)',
+            ],
+          },
+        }],
+      ],
+    },
+    {
+      'target_name': 'xcomposite',
+      'type': 'none',
+      'direct_dependent_settings': {
+        'cflags': [
+          '<!@(<(pkg-config) --cflags xcomposite)',
+        ],
+      },
+      'link_settings': {
+        'ldflags': [
+          '<!@(<(pkg-config) --libs-only-L --libs-only-other xcomposite)',
+        ],
+        'libraries': [
+          '<!@(<(pkg-config) --libs-only-l xcomposite)',
+        ],
+      },
+    },
+    {
+      'target_name': 'xext',
+      'type': 'none',
+      'direct_dependent_settings': {
+        'cflags': [
+          '<!@(<(pkg-config) --cflags xext)',
+        ],
+      },
+      'link_settings': {
+        'ldflags': [
+          '<!@(<(pkg-config) --libs-only-L --libs-only-other xext)',
+        ],
+        'libraries': [
+          '<!@(<(pkg-config) --libs-only-l xext)',
+        ],
+      },
+    },
+    {
       'target_name': 'udev',
       'type': 'none',
       'conditions': [
         # libudev is not available on *BSD
         ['_toolset=="target" and os_bsd!=1', {
           'direct_dependent_settings': {
             'cflags': [
               '<!@(<(pkg-config) --cflags libudev)'
diff --git a/ui/gfx/gfx.gyp b/ui/gfx/gfx.gyp
--- a/ui/gfx/gfx.gyp
+++ b/ui/gfx/gfx.gyp
@@ -371,17 +371,17 @@
         }],
         ['OS=="android" or OS=="ios"', {
           'sources!': [
             'render_text.cc',
             'render_text.h',
             'text_utils_skia.cc',
           ],
         }],
-        ['use_x11==1', {
+        ['OS == "linux"', {
           'dependencies': [
             'gfx_x11',
           ],
         }],
         ['use_pango==1', {
           'dependencies': [
             '<(DEPTH)/build/linux/system.gyp:pangocairo',
           ],
@@ -524,29 +524,37 @@
           ],
           'variables': {
             'test_suite_name': 'gfx_unittests',
           },
           'includes': [ '../../build/apk_test.gypi' ],
         },
       ],
     }],
-    ['use_x11 == 1', {
+    ['OS == "linux"', {
       'targets': [
         {
           'target_name': 'gfx_x11',
           'type': '<(component)',
           'dependencies': [
             '../../base/base.gyp:base',
             '../../build/linux/system.gyp:x11',
             'gfx_geometry',
           ],
           'defines': [
             'GFX_IMPLEMENTATION',
           ],
+          # Need 'target_conditions' to override filename_rules
+          'target_conditions': [
+            ['OS == "linux"', {
+              'sources/': [
+                ['include', '^x/'],
+              ],
+            }],
+          ],
           'sources': [
             'x/x11_atom_cache.cc',
             'x/x11_atom_cache.h',
             'x/x11_connection.cc',
             'x/x11_connection.h',
             'x/x11_error_tracker.cc',
             'x/x11_error_tracker.h',
             'x/x11_types.cc',
diff --git a/ui/gfx/x/x11_types.cc b/ui/gfx/x/x11_types.cc
--- a/ui/gfx/x/x11_types.cc
+++ b/ui/gfx/x/x11_types.cc
@@ -2,24 +2,23 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
 #include "ui/gfx/x/x11_types.h"
 
 #include <X11/Xlib.h>
 
 #include "base/message_loop/message_loop.h"
+#include "ui/gfx/ozone/surface_factory_ozone.h"
 
 namespace gfx {
 
 XDisplay* GetXDisplay() {
-  static XDisplay* display = NULL;
-  if (!display)
-    display = XOpenDisplay(NULL);
-  return display;
+  return reinterpret_cast<Display *>(
+      SurfaceFactoryOzone::GetInstance()->GetNativeDisplay());
 }
 
 void PutARGBImage(XDisplay* display,
                   void* visual, int depth,
                   XID pixmap, void* pixmap_gc,
                   const uint8* data,
                   int width, int height) {
   PutARGBImage(display,
diff --git a/ui/gl/gl.gyp b/ui/gl/gl.gyp
--- a/ui/gl/gl.gyp
+++ b/ui/gl/gl.gyp
@@ -193,17 +193,17 @@
         ],
         }],
         ['OS in ("android", "linux")', {
           'sources': [
             'gl_implementation_osmesa.cc',
             'gl_implementation_osmesa.h',
           ],
         }],
-        ['use_x11 == 1', {
+        ['OS == "linux"', {
           'sources': [
             'gl_context_glx.cc',
             'gl_context_glx.h',
             'gl_glx_api_implementation.cc',
             'gl_glx_api_implementation.h',
             'gl_image_glx.cc',
             'gl_image_glx.h',
             'gl_surface_glx.cc',
diff --git a/ui/gl/gl_bindings.h b/ui/gl/gl_bindings.h
--- a/ui/gl/gl_bindings.h
+++ b/ui/gl/gl_bindings.h
@@ -20,17 +20,17 @@
 #include "build/build_config.h"
 #include "ui/gl/gl_export.h"
 
 // The standard OpenGL native extension headers are also included.
 #if defined(OS_WIN)
 #include <GL/wglext.h>
 #elif defined(OS_MACOSX)
 #include <OpenGL/OpenGL.h>
-#elif defined(USE_X11)
+#elif defined(OS_LINUX)
 #include <GL/glx.h>
 #include <GL/glxext.h>
 
 // Undefine some macros defined by X headers. This is why this file should only
 // be included in .cc files.
 #undef Bool
 #undef None
 #undef Status
@@ -217,16 +217,19 @@ typedef uint64 EGLuint64CHROMIUM;
 #if defined(OS_WIN)
 #include "gl_bindings_autogen_egl.h"
 #include "gl_bindings_autogen_wgl.h"
 #elif defined(USE_X11)
 #include "gl_bindings_autogen_egl.h"
 #include "gl_bindings_autogen_glx.h"
 #elif defined(USE_OZONE)
 #include "gl_bindings_autogen_egl.h"
+#if defined(OS_LINUX)
+#include "gl_bindings_autogen_glx.h"
+#endif
 #elif defined(OS_ANDROID)
 #include "gl_bindings_autogen_egl.h"
 #endif
 
 namespace gfx {
 
 struct GL_EXPORT DriverGL {
   void InitializeStaticBindings();
@@ -280,17 +283,17 @@ struct GL_EXPORT DriverEGL {
   void ClearBindings();
 
   ProcsEGL fn;
   ProcsEGL debug_fn;
   ExtensionsEGL ext;
 };
 #endif
 
-#if defined(USE_X11)
+#if defined(OS_LINUX)
 struct GL_EXPORT DriverGLX {
   void InitializeStaticBindings();
   void InitializeDynamicBindings(GLContext* context);
   void InitializeDebugBindings();
   void ClearBindings();
 
   ProcsGLX fn;
   ProcsGLX debug_fn;
@@ -320,16 +323,23 @@ GL_EXPORT extern GLXApi* g_current_glx_c
 GL_EXPORT extern DriverEGL g_driver_egl;
 GL_EXPORT extern DriverGLX g_driver_glx;
 
 #elif defined(USE_OZONE)
 
 GL_EXPORT extern EGLApi* g_current_egl_context;
 GL_EXPORT extern DriverEGL g_driver_egl;
 
+#if defined(OS_LINUX)
+
+GL_EXPORT extern GLXApi* g_current_glx_context;
+GL_EXPORT extern DriverGLX g_driver_glx;
+
+#endif
+
 #elif defined(OS_ANDROID)
 
 GL_EXPORT extern EGLApi* g_current_egl_context;
 GL_EXPORT extern DriverEGL g_driver_egl;
 
 #endif
 
 }  // namespace gfx
diff --git a/ui/gl/gl_implementation.cc b/ui/gl/gl_implementation.cc
--- a/ui/gl/gl_implementation.cc
+++ b/ui/gl/gl_implementation.cc
@@ -59,16 +59,19 @@ WGLApi* g_current_wgl_context;
 #elif defined(USE_X11)
 
 EGLApi* g_current_egl_context;
 GLXApi* g_current_glx_context;
 
 #elif defined(USE_OZONE)
 
 EGLApi* g_current_egl_context;
+#if defined(OS_LINUX)
+GLXApi* g_current_glx_context;
+#endif
 
 #elif defined(OS_ANDROID)
 
 EGLApi* g_current_egl_context;
 
 #endif
 
 GLImplementation GetNamedGLImplementation(const std::string& name) {
