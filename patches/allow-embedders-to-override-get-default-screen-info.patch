Description: Allow embedders to override RenderWidgetHostViewPort::GetDefaultScreenInfo
 This modifies the Aura implementation of RWHVP::GetDefaultScreenInfo so that it
 can delegate to embedders, rather than using Aura / X11 to do this
Author: Chris Coulson <chris.coulson@canonical.com>

diff --git a/content/browser/renderer_host/render_widget_host_view_aura.cc b/content/browser/renderer_host/render_widget_host_view_aura.cc
--- a/content/browser/renderer_host/render_widget_host_view_aura.cc
+++ b/content/browser/renderer_host/render_widget_host_view_aura.cc
@@ -3372,12 +3372,13 @@ void RenderWidgetHostViewAura::DetachFro
 // static
 RenderWidgetHostView* RenderWidgetHostView::CreateViewForWidget(
     RenderWidgetHost* widget) {
   return new RenderWidgetHostViewAura(widget);
 }
 
 // static
 void RenderWidgetHostViewPort::GetDefaultScreenInfo(WebScreenInfo* results) {
-  GetScreenInfoForWindow(results, NULL);
+  if (!RenderWidgetHostViewBase::GetDefaultScreenInfo(results))
+    GetScreenInfoForWindow(results, NULL);
 }
 
 }  // namespace content
diff --git a/content/browser/renderer_host/render_widget_host_view_base.cc b/content/browser/renderer_host/render_widget_host_view_base.cc
--- a/content/browser/renderer_host/render_widget_host_view_base.cc
+++ b/content/browser/renderer_host/render_widget_host_view_base.cc
@@ -7,16 +7,18 @@
 #include "base/logging.h"
 #include "content/browser/accessibility/browser_accessibility_manager.h"
 #include "content/browser/gpu/gpu_data_manager_impl.h"
 #include "content/browser/renderer_host/basic_mouse_wheel_smooth_scroll_gesture.h"
 #include "content/browser/renderer_host/render_process_host_impl.h"
 #include "content/browser/renderer_host/render_widget_host_impl.h"
 #include "content/port/browser/render_widget_host_view_frame_subscriber.h"
 #include "content/port/browser/synthetic_gesture.h"
+#include "content/public/browser/content_browser_client.h"
+#include "content/public/common/content_client.h"
 #include "third_party/WebKit/public/web/WebScreenInfo.h"
 #include "ui/gfx/display.h"
 #include "ui/gfx/screen.h"
 #include "ui/gfx/size_conversions.h"
 #include "ui/gfx/size_f.h"
 
 #if defined(OS_WIN)
 #include "base/command_line.h"
@@ -372,16 +374,22 @@ void RenderWidgetHostViewBase::DetachPlu
   // away. This will prevent the plugin windows from getting destroyed
   // automatically. The detached plugin windows will get cleaned up in proper
   // sequence as part of the usual cleanup when the plugin instance goes away.
   EnumChildWindows(parent, DetachPluginWindowsCallbackInternal, NULL);
 }
 
 #endif  // OS_WIN
 
+// static
+bool RenderWidgetHostViewBase::GetDefaultScreenInfo(
+    WebKit::WebScreenInfo* result) {
+  return GetContentClient()->browser()->GetDefaultScreenInfo(result);
+}
+
 RenderWidgetHostViewBase::RenderWidgetHostViewBase()
     : popup_type_(WebKit::WebPopupTypeNone),
       mouse_locked_(false),
       showing_context_menu_(false),
       selection_text_offset_(0),
       selection_range_(gfx::Range::InvalidRange()),
       current_device_scale_factor_(0),
       renderer_frame_number_(0) {
diff --git a/content/browser/renderer_host/render_widget_host_view_base.h b/content/browser/renderer_host/render_widget_host_view_base.h
--- a/content/browser/renderer_host/render_widget_host_view_base.h
+++ b/content/browser/renderer_host/render_widget_host_view_base.h
@@ -19,16 +19,20 @@
 #include "base/memory/scoped_ptr.h"
 #include "base/callback_forward.h"
 #include "content/common/content_export.h"
 #include "content/port/browser/render_widget_host_view_port.h"
 #include "ui/gfx/native_widget_types.h"
 #include "ui/gfx/range/range.h"
 #include "ui/gfx/rect.h"
 
+namespace WebKit {
+class WebScreenInfo;
+}
+
 namespace content {
 
 class RenderWidgetHostImpl;
 
 // Basic implementation shared by concrete RenderWidgetHostView
 // subclasses.
 //
 // Note that nothing should use this class, except concrete subclasses
@@ -97,16 +101,18 @@ class CONTENT_EXPORT RenderWidgetHostVie
   bool HasDisplayPropertyChanged(gfx::NativeView view);
 
 #if defined(OS_WIN)
   // The callback that DetachPluginsHelper calls for each child window. Call
   // this directly if you want to do custom filtering on plugin windows first.
   static void DetachPluginWindowsCallback(HWND window);
 #endif
 
+  static bool GetDefaultScreenInfo(WebKit::WebScreenInfo* results);
+
  protected:
   // Interface class only, do not construct.
   RenderWidgetHostViewBase();
 
 #if defined(OS_WIN)
   // Shared implementation of MovePluginWindows for use by win and aura/wina.
   static void MovePluginWindowsHelper(
       HWND parent,
diff --git a/content/public/browser/content_browser_client.cc b/content/public/browser/content_browser_client.cc
--- a/content/public/browser/content_browser_client.cc
+++ b/content/public/browser/content_browser_client.cc
@@ -283,16 +283,21 @@ ui::SelectFilePolicy* ContentBrowserClie
     WebContents* web_contents) {
   return NULL;
 }
 
 LocationProvider* ContentBrowserClient::OverrideSystemLocationProvider() {
   return NULL;
 }
 
+bool ContentBrowserClient::GetDefaultScreenInfo(
+    WebKit::WebScreenInfo* result) {
+  return false;
+}
+
 #if defined(OS_WIN)
 const wchar_t* ContentBrowserClient::GetResourceDllName() {
   return NULL;
 }
 #endif
 
 #if defined(USE_NSS)
 crypto::CryptoModuleBlockingPasswordDelegate*
diff --git a/content/public/browser/content_browser_client.h b/content/public/browser/content_browser_client.h
--- a/content/public/browser/content_browser_client.h
+++ b/content/public/browser/content_browser_client.h
@@ -71,16 +71,20 @@ namespace ui {
 class SelectFilePolicy;
 }
 
 namespace fileapi {
 class ExternalMountPoints;
 class FileSystemBackend;
 }
 
+namespace WebKit {
+class WebScreenInfo;
+}
+
 namespace content {
 
 class AccessTokenStore;
 class BrowserChildProcessHost;
 class BrowserContext;
 class BrowserMainParts;
 class BrowserPluginGuestDelegate;
 class BrowserPpapiHost;
@@ -563,16 +567,19 @@ class CONTENT_EXPORT ContentBrowserClien
       BrowserContext* browser_context,
       const base::FilePath& storage_partition_path,
       ScopedVector<fileapi::FileSystemBackend>* additional_backends) {}
 
   // Allows an embedder to return its own LocationProvider implementation.
   // Return NULL to use the default one for the platform to be created.
   virtual LocationProvider* OverrideSystemLocationProvider();
 
+  // Allows an embedder to override RenderViewHostPort::GetDefaultScreenInfo
+  virtual bool GetDefaultScreenInfo(WebKit::WebScreenInfo* result);
+
 #if defined(OS_POSIX) && !defined(OS_MACOSX)
   // Populates |mappings| with all files that need to be mapped before launching
   // a child process.
   virtual void GetAdditionalMappedFilesForChildProcess(
       const CommandLine& command_line,
       int child_process_id,
       std::vector<FileDescriptorInfo>* mappings) {}
 #endif
