# Description: Don't use EGL_EXT_create_context_robustness or
#  GLX_ARB_create_context_robustness. Contexts created by Qt don't use these,
#  and shared contexts must all be created with the same attributes
# Author: Chris Coulson <chris.coulson@canonical.com>

diff --git a/ui/gl/gl_surface_egl.cc b/ui/gl/gl_surface_egl.cc
--- a/ui/gl/gl_surface_egl.cc
+++ b/ui/gl/gl_surface_egl.cc
@@ -157,18 +157,18 @@ bool GLSurfaceEGL::InitializeOneOff() {
                        1,
                        &num_configs)) {
     LOG(ERROR) << "eglChooseConfig failed with error "
                << GetLastEGLErrorString();
     return false;
   }
 
   g_egl_extensions = eglQueryString(g_display, EGL_EXTENSIONS);
-  g_egl_create_context_robustness_supported =
-      HasEGLExtension("EGL_EXT_create_context_robustness");
+  //g_egl_create_context_robustness_supported =
+  //    HasEGLExtension("EGL_EXT_create_context_robustness");
   g_egl_sync_control_supported =
       HasEGLExtension("EGL_CHROMIUM_sync_control");
   g_egl_window_fixed_size_supported =
       HasEGLExtension("EGL_ANGLE_window_fixed_size");
 
   // Check if SurfacelessEGL is supported.
   g_egl_surfaceless_context_supported =
       HasEGLExtension("EGL_KHR_surfaceless_context");
diff --git a/ui/gl/gl_surface_glx.cc b/ui/gl/gl_surface_glx.cc
--- a/ui/gl/gl_surface_glx.cc
+++ b/ui/gl/gl_surface_glx.cc
@@ -331,18 +331,18 @@ bool GLSurfaceGLX::InitializeOneOff() {
   if (major == 1 && minor < 3) {
     LOG(ERROR) << "GLX 1.3 or later is required.";
     return false;
   }
 
   g_glx_extensions = glXQueryExtensionsString(g_display, 0);
   g_glx_context_create =
       HasGLXExtension("GLX_ARB_create_context");
-  g_glx_create_context_robustness_supported =
-      HasGLXExtension("GLX_ARB_create_context_robustness");
+  //g_glx_create_context_robustness_supported =
+  //    HasGLXExtension("GLX_ARB_create_context_robustness");
   g_glx_texture_from_pixmap_supported =
       HasGLXExtension("GLX_EXT_texture_from_pixmap");
   g_glx_oml_sync_control_supported =
       HasGLXExtension("GLX_OML_sync_control");
   g_glx_get_msc_rate_oml_supported = g_glx_oml_sync_control_supported;
   g_glx_sgi_video_sync_supported =
       HasGLXExtension("GLX_SGI_video_sync");
 
