# Description: Support native popup menus in oxide by activating the Android code
#  in Oxide builds
# Author: Chris Coulson <chris.coulson@canonical.com>

diff --git a/content/browser/renderer_host/render_view_host_impl.cc b/content/browser/renderer_host/render_view_host_impl.cc
--- a/content/browser/renderer_host/render_view_host_impl.cc
+++ b/content/browser/renderer_host/render_view_host_impl.cc
@@ -1129,20 +1129,18 @@ bool RenderViewHostImpl::OnMessageReceiv
     IPC_MESSAGE_HANDLER(ViewHostMsg_ScriptEvalResponse, OnScriptEvalResponse)
     IPC_MESSAGE_HANDLER(ViewHostMsg_DidZoomURL, OnDidZoomURL)
     IPC_MESSAGE_HANDLER(DesktopNotificationHostMsg_RequestPermission,
                         OnRequestDesktopNotificationPermission)
     IPC_MESSAGE_HANDLER(DesktopNotificationHostMsg_Show,
                         OnShowDesktopNotification)
     IPC_MESSAGE_HANDLER(DesktopNotificationHostMsg_Cancel,
                         OnCancelDesktopNotification)
-#if defined(OS_MACOSX) || defined(OS_ANDROID)
     IPC_MESSAGE_HANDLER(ViewHostMsg_ShowPopup, OnShowPopup)
     IPC_MESSAGE_HANDLER(ViewHostMsg_HidePopup, OnHidePopup)
-#endif
     IPC_MESSAGE_HANDLER(ViewHostMsg_RunFileChooser, OnRunFileChooser)
     IPC_MESSAGE_HANDLER(ViewHostMsg_DidAccessInitialDocument,
                         OnDidAccessInitialDocument)
     IPC_MESSAGE_HANDLER(AccessibilityHostMsg_Events, OnAccessibilityEvents)
     IPC_MESSAGE_HANDLER(AccessibilityHostMsg_LocationChanges,
                         OnAccessibilityLocationChanges)
     IPC_MESSAGE_HANDLER(ViewHostMsg_FocusedNodeTouched, OnFocusedNodeTouched)
     // Have the super handle all other messages.
@@ -1611,28 +1609,26 @@ void RenderViewHostImpl::ForwardKeyboard
   if (ignore_input_events()) {
     if (key_event.type == WebInputEvent::RawKeyDown)
       delegate_->OnIgnoredUIEvent();
     return;
   }
   RenderWidgetHostImpl::ForwardKeyboardEvent(key_event);
 }
 
-#if defined(OS_ANDROID)
 void RenderViewHostImpl::DidSelectPopupMenuItems(
     const std::vector<int>& selected_indices) {
   Send(new ViewMsg_SelectPopupMenuItems(GetRoutingID(), false,
                                         selected_indices));
 }
 
 void RenderViewHostImpl::DidCancelPopupMenu() {
   Send(new ViewMsg_SelectPopupMenuItems(GetRoutingID(), true,
                                         std::vector<int>()));
 }
-#endif
 
 #if defined(OS_MACOSX)
 void RenderViewHostImpl::DidSelectPopupMenuItem(int selected_index) {
   Send(new ViewMsg_SelectPopupMenuItem(GetRoutingID(), selected_index));
 }
 
 void RenderViewHostImpl::DidCancelPopupMenu() {
   Send(new ViewMsg_SelectPopupMenuItem(GetRoutingID(), -1));
@@ -1858,17 +1854,16 @@ void RenderViewHostImpl::OnFocusedNodeTo
     virtual_keyboard_requested_ = base::win::DisplayVirtualKeyboard();
   } else {
     virtual_keyboard_requested_ = false;
     base::win::DismissVirtualKeyboard();
   }
 #endif
 }
 
-#if defined(OS_MACOSX) || defined(OS_ANDROID)
 void RenderViewHostImpl::OnShowPopup(
     const ViewHostMsg_ShowPopup_Params& params) {
   RenderViewHostDelegateView* view = delegate_->GetDelegateView();
   if (view) {
     view->ShowPopupMenu(params.bounds,
                         params.item_height,
                         params.item_font_size,
                         params.selected_item,
@@ -1878,17 +1873,16 @@ void RenderViewHostImpl::OnShowPopup(
   }
 }
 
 void RenderViewHostImpl::OnHidePopup() {
   RenderViewHostDelegateView* view = delegate_->GetDelegateView();
   if (view)
     view->HidePopupMenu();
 }
-#endif
 
 void RenderViewHostImpl::SetState(RenderViewHostImplState rvh_state) {
   // We update the number of RenderViews in a SiteInstance when the
   // swapped out status of this RenderView gets flipped to/from live.
   if (!IsRVHStateActive(rvh_state_) && IsRVHStateActive(rvh_state))
     instance_->increment_active_view_count();
   else if (IsRVHStateActive(rvh_state_) && !IsRVHStateActive(rvh_state))
     instance_->decrement_active_view_count();
diff --git a/content/browser/renderer_host/render_view_host_impl.h b/content/browser/renderer_host/render_view_host_impl.h
--- a/content/browser/renderer_host/render_view_host_impl.h
+++ b/content/browser/renderer_host/render_view_host_impl.h
@@ -425,20 +425,20 @@ class CONTENT_EXPORT RenderViewHostImpl
   void DidSelectPopupMenuItem(int selected_index);
   void DidCancelPopupMenu();
 #endif
 
 #if defined(OS_ANDROID)
   BrowserMediaPlayerManager* media_player_manager() {
     return media_player_manager_.get();
   }
+#endif
 
   void DidSelectPopupMenuItems(const std::vector<int>& selected_indices);
   void DidCancelPopupMenu();
-#endif
 
   // User rotated the screen. Calls the "onorientationchange" Javascript hook.
   void SendOrientationChangeEvent(int orientation);
 
   int main_frame_routing_id() const {
     return main_frame_routing_id_;
   }
 
@@ -584,20 +584,18 @@ class CONTENT_EXPORT RenderViewHostImpl
                                               int callback_id);
   void OnShowDesktopNotification(
       const ShowDesktopNotificationHostMsgParams& params);
   void OnCancelDesktopNotification(int notification_id);
   void OnRunFileChooser(const FileChooserParams& params);
   void OnDidAccessInitialDocument();
   void OnFocusedNodeTouched(bool editable);
 
-#if defined(OS_MACOSX) || defined(OS_ANDROID)
   void OnShowPopup(const ViewHostMsg_ShowPopup_Params& params);
   void OnHidePopup();
-#endif
 
  private:
   // TODO(nasko): Temporarily friend RenderFrameHostImpl, so we don't duplicate
   // utility functions and state needed in both classes, while we move frame
   // specific code away from this class.
   friend class RenderFrameHostImpl;
   friend class TestRenderViewHost;
   FRIEND_TEST_ALL_PREFIXES(RenderViewHostTest, BasicRenderFrameHost);
diff --git a/content/common/view_messages.h b/content/common/view_messages.h
--- a/content/common/view_messages.h
+++ b/content/common/view_messages.h
@@ -1020,22 +1020,24 @@ IPC_MESSAGE_CONTROL1(ViewMsg_SetWebKitSh
 // they came in, so the renderer can tell if it needs to send updated rects.
 // Otherwise just pass -1 to always receive the list of rects.
 //
 // There must be an active search string (it is probably most useful to call
 // this immediately after a ViewHostMsg_Find_Reply message arrives with
 // final_update set to true).
 IPC_MESSAGE_ROUTED1(ViewMsg_FindMatchRects,
                     int /* current_version */)
+#endif
 
 // External popup menus.
 IPC_MESSAGE_ROUTED2(ViewMsg_SelectPopupMenuItems,
                     bool /* user canceled the popup */,
                     std::vector<int> /* selected indices */)
 
+#if defined(OS_ANDROID)
 // Notifies the renderer whether hiding/showing the top controls is enabled
 // and whether or not to animate to the proper state.
 IPC_MESSAGE_ROUTED3(ViewMsg_UpdateTopControlsState,
                     bool /* enable_hiding */,
                     bool /* enable_showing */,
                     bool /* animate */)
 
 IPC_MESSAGE_ROUTED0(ViewMsg_ShowImeIfNeeded)
@@ -1050,18 +1052,19 @@ IPC_MESSAGE_ROUTED0(ViewMsg_ImeEventAck)
 
 // Sent by the browser when we should pause video playback.
 IPC_MESSAGE_ROUTED0(ViewMsg_PauseVideo);
 
 // Extracts the data at the given rect, returning it through the
 // ViewHostMsg_SmartClipDataExtracted IPC.
 IPC_MESSAGE_ROUTED1(ViewMsg_ExtractSmartClipData,
                     gfx::Rect /* rect */)
+#endif
 
-#elif defined(OS_MACOSX)
+#if defined(OS_MACOSX)
 // Let the RenderView know its window has changed visibility.
 IPC_MESSAGE_ROUTED1(ViewMsg_SetWindowVisibility,
                     bool /* visibile */)
 
 // Let the RenderView know its window's frame has changed.
 IPC_MESSAGE_ROUTED2(ViewMsg_WindowFrameChanged,
                     gfx::Rect /* window frame */,
                     gfx::Rect /* content view frame */)
diff --git a/content/renderer/external_popup_menu.cc b/content/renderer/external_popup_menu.cc
--- a/content/renderer/external_popup_menu.cc
+++ b/content/renderer/external_popup_menu.cc
@@ -65,21 +65,19 @@ void ExternalPopupMenu::DidSelectItem(in
     return;
   if (index == -1)
     popup_menu_client_->didCancel();
   else
     popup_menu_client_->didAcceptIndex(index);
 }
 #endif
 
-#if defined(OS_ANDROID)
 void ExternalPopupMenu::DidSelectItems(bool canceled,
                                        const std::vector<int>& indices) {
   if (!popup_menu_client_)
     return;
   if (canceled)
     popup_menu_client_->didCancel();
   else
     popup_menu_client_->didAcceptIndices(indices);
 }
-#endif
 
 }  // namespace content
diff --git a/content/renderer/external_popup_menu.h b/content/renderer/external_popup_menu.h
--- a/content/renderer/external_popup_menu.h
+++ b/content/renderer/external_popup_menu.h
@@ -31,20 +31,18 @@ class ExternalPopupMenu : public blink::
       float scale, const gfx::Point& offset);
 
 #if defined(OS_MACOSX)
   // Called when the user has selected an item. |selected_item| is -1 if the
   // user canceled the popup.
   void DidSelectItem(int selected_index);
 #endif
 
-#if defined(OS_ANDROID)
   // Called when the user has selected items or canceled the popup.
   void DidSelectItems(bool canceled, const std::vector<int>& selected_indices);
-#endif
 
   // blink::WebExternalPopupMenu implementation:
   virtual void show(const blink::WebRect& bounds);
   virtual void close();
 
  private:
   RenderViewImpl* render_view_;
   blink::WebPopupMenuInfo popup_menu_info_;
diff --git a/content/renderer/render_thread_impl.cc b/content/renderer/render_thread_impl.cc
--- a/content/renderer/render_thread_impl.cc
+++ b/content/renderer/render_thread_impl.cc
@@ -328,20 +328,18 @@ void RenderThreadImpl::Init() {
   base::debug::TraceLog::GetInstance()->SetThreadSortIndex(
       base::PlatformThread::CurrentId(),
       kTraceEventRendererMainThreadSortIndex);
 
   v8::V8::SetCounterFunction(base::StatsTable::FindLocation);
   v8::V8::SetCreateHistogramFunction(CreateHistogram);
   v8::V8::SetAddHistogramSampleFunction(AddHistogramSample);
 
-#if defined(OS_MACOSX) || defined(OS_ANDROID)
   // On Mac and Android, the select popups are rendered by the browser.
   blink::WebView::setUseExternalPopupMenus(true);
-#endif
 
   lazy_tls.Pointer()->Set(this);
 
   // Register this object as the main thread.
   ChildProcess::current()->set_main_thread(this);
 
   // In single process the single process is all there is.
   suspend_webkit_shared_timer_ = true;
diff --git a/content/renderer/render_view_impl.cc b/content/renderer/render_view_impl.cc
--- a/content/renderer/render_view_impl.cc
+++ b/content/renderer/render_view_impl.cc
@@ -1143,22 +1143,25 @@ bool RenderViewImpl::OnMessageReceived(c
     IPC_MESSAGE_HANDLER(ViewMsg_ReleaseDisambiguationPopupDIB,
                         OnReleaseDisambiguationPopupDIB)
     IPC_MESSAGE_HANDLER(ViewMsg_WindowSnapshotCompleted,
                         OnWindowSnapshotCompleted)
 #if defined(OS_ANDROID)
     IPC_MESSAGE_HANDLER(InputMsg_ActivateNearestFindResult,
                         OnActivateNearestFindResult)
     IPC_MESSAGE_HANDLER(ViewMsg_FindMatchRects, OnFindMatchRects)
+#endif
     IPC_MESSAGE_HANDLER(ViewMsg_SelectPopupMenuItems, OnSelectPopupMenuItems)
+#if defined(OS_ANDROID)
     IPC_MESSAGE_HANDLER(ViewMsg_UpdateTopControlsState,
                         OnUpdateTopControlsState)
     IPC_MESSAGE_HANDLER(ViewMsg_PauseVideo, OnPauseVideo)
     IPC_MESSAGE_HANDLER(ViewMsg_ExtractSmartClipData, OnExtractSmartClipData)
-#elif defined(OS_MACOSX)
+#endif
+#if defined(OS_MACOSX)
     IPC_MESSAGE_HANDLER(ViewMsg_PluginImeCompositionCompleted,
                         OnPluginImeCompositionCompleted)
     IPC_MESSAGE_HANDLER(ViewMsg_SelectPopupMenuItem, OnSelectPopupMenuItem)
     IPC_MESSAGE_HANDLER(ViewMsg_SetInLiveResize, OnSetInLiveResize)
     IPC_MESSAGE_HANDLER(ViewMsg_SetWindowVisibility, OnSetWindowVisibility)
     IPC_MESSAGE_HANDLER(ViewMsg_WindowFrameChanged, OnWindowFrameChanged)
 #endif
     // Adding a new message? Add platform independent ones first, then put the
@@ -4732,31 +4735,29 @@ WebMediaPlayer* RenderViewImpl::CreateAn
 void RenderViewImpl::OnSelectPopupMenuItem(int selected_index) {
   if (external_popup_menu_ == NULL)
     return;
   external_popup_menu_->DidSelectItem(selected_index);
   external_popup_menu_.reset();
 }
 #endif
 
-#if defined(OS_ANDROID)
 void RenderViewImpl::OnSelectPopupMenuItems(
     bool canceled,
     const std::vector<int>& selected_indices) {
   // It is possible to receive more than one of these calls if the user presses
   // a select faster than it takes for the show-select-popup IPC message to make
   // it to the browser UI thread.  Ignore the extra-messages.
   // TODO(jcivelli): http:/b/5793321 Implement a better fix, as detailed in bug.
   if (!external_popup_menu_)
     return;
 
   external_popup_menu_->DidSelectItems(canceled, selected_indices);
   external_popup_menu_.reset();
 }
-#endif
 
 void RenderViewImpl::DidHideExternalPopupMenu() {
   // We need to clear external_popup_menu_ as soon as ExternalPopupMenu::close
   // is called. Otherwise, createExternalPopupMenu() for new popup will fail.
   external_popup_menu_.reset();
 }
 
 void RenderViewImpl::OnShowContextMenu(const gfx::Point& location) {
diff --git a/content/renderer/render_view_impl.h b/content/renderer/render_view_impl.h
--- a/content/renderer/render_view_impl.h
+++ b/content/renderer/render_view_impl.h
@@ -945,26 +945,29 @@ class CONTENT_EXPORT RenderViewImpl
   void OnZoom(PageZoom zoom);
   void OnEnableViewSourceMode();
   void OnDisownOpener();
   void OnWindowSnapshotCompleted(const int snapshot_id,
       const gfx::Size& size, const std::vector<unsigned char>& png);
 #if defined(OS_ANDROID)
   void OnActivateNearestFindResult(int request_id, float x, float y);
   void OnFindMatchRects(int current_version);
+#endif
   void OnSelectPopupMenuItems(bool canceled,
                               const std::vector<int>& selected_indices);
+#if defined(OS_ANDROID)
   void OnUndoScrollFocusedEditableNodeIntoRect();
   void OnUpdateTopControlsState(bool enable_hiding,
                                 bool enable_showing,
                                 bool animate);
   void OnPauseVideo();
   void OnExtractSmartClipData(const gfx::Rect& rect);
   void GetSelectionRootBounds(gfx::Rect* bounds) const;
-#elif defined(OS_MACOSX)
+#endif
+#if defined(OS_MACOSX)
   void OnPluginImeCompositionCompleted(const base::string16& text,
                                        int plugin_id);
   void OnSelectPopupMenuItem(int selected_index);
   void OnSetInLiveResize(bool in_live_resize);
   void OnSetWindowVisibility(bool visible);
   void OnWindowFrameChanged(const gfx::Rect& window_frame,
                             const gfx::Rect& view_frame);
 #endif
