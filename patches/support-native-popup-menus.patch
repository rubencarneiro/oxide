# Description: Support native popup menus in oxide by activating the Android code
#  in Oxide builds
# Author: Chris Coulson <chris.coulson@canonical.com>

diff --git a/content/browser/frame_host/render_frame_host_impl.cc b/content/browser/frame_host/render_frame_host_impl.cc
--- a/content/browser/frame_host/render_frame_host_impl.cc
+++ b/content/browser/frame_host/render_frame_host_impl.cc
@@ -473,20 +473,18 @@ bool RenderFrameHostImpl::OnMessageRecei
     IPC_MESSAGE_HANDLER(FrameHostMsg_ToggleFullscreen, OnToggleFullscreen)
     // The following message is synthetic and doesn't come from RenderFrame, but
     // from RenderProcessHost.
     IPC_MESSAGE_HANDLER(FrameHostMsg_RenderProcessGone, OnRenderProcessGone)
     IPC_MESSAGE_HANDLER(FrameHostMsg_DidStartLoading, OnDidStartLoading)
     IPC_MESSAGE_HANDLER(FrameHostMsg_DidStopLoading, OnDidStopLoading)
     IPC_MESSAGE_HANDLER(FrameHostMsg_DidChangeLoadProgress,
                         OnDidChangeLoadProgress)
-#if defined(OS_MACOSX) || defined(OS_ANDROID)
     IPC_MESSAGE_HANDLER(FrameHostMsg_ShowPopup, OnShowPopup)
     IPC_MESSAGE_HANDLER(FrameHostMsg_HidePopup, OnHidePopup)
-#endif
   IPC_END_MESSAGE_MAP()
 
   // No further actions here, since we may have been deleted.
   return handled;
 }
 
 void RenderFrameHostImpl::AccessibilitySetFocus(int object_id) {
   Send(new AccessibilityMsg_SetFocus(routing_id_, object_id));
@@ -1546,17 +1544,16 @@ void RenderFrameHostImpl::OnDidStopLoadi
   frame_tree_node_->DidStopLoading();
   navigation_handle_.reset();
 }
 
 void RenderFrameHostImpl::OnDidChangeLoadProgress(double load_progress) {
   frame_tree_node_->DidChangeLoadProgress(load_progress);
 }
 
-#if defined(OS_MACOSX) || defined(OS_ANDROID)
 void RenderFrameHostImpl::OnShowPopup(
     const FrameHostMsg_ShowPopup_Params& params) {
   RenderViewHostDelegateView* view =
       render_view_host_->delegate_->GetDelegateView();
   if (view) {
     view->ShowPopupMenu(this,
                         params.bounds,
                         params.item_height,
@@ -1569,17 +1566,16 @@ void RenderFrameHostImpl::OnShowPopup(
 }
 
 void RenderFrameHostImpl::OnHidePopup() {
   RenderViewHostDelegateView* view =
       render_view_host_->delegate_->GetDelegateView();
   if (view)
     view->HidePopupMenu();
 }
-#endif
 
 void RenderFrameHostImpl::RegisterMojoServices() {
   GeolocationServiceContext* geolocation_service_context =
       delegate_ ? delegate_->GetGeolocationServiceContext() : NULL;
   if (geolocation_service_context) {
     // TODO(creis): Bind process ID here so that GeolocationServiceImpl
     // can perform permissions checks once site isolation is complete.
     // crbug.com/426384
@@ -2034,30 +2030,28 @@ RenderFrameHostImpl::GetParentNativeView
 void RenderFrameHostImpl::DidSelectPopupMenuItem(int selected_index) {
   Send(new FrameMsg_SelectPopupMenuItem(routing_id_, selected_index));
 }
 
 void RenderFrameHostImpl::DidCancelPopupMenu() {
   Send(new FrameMsg_SelectPopupMenuItem(routing_id_, -1));
 }
 
-#elif defined(OS_ANDROID)
+#endif
 
 void RenderFrameHostImpl::DidSelectPopupMenuItems(
     const std::vector<int>& selected_indices) {
   Send(new FrameMsg_SelectPopupMenuItems(routing_id_, false, selected_indices));
 }
 
 void RenderFrameHostImpl::DidCancelPopupMenu() {
   Send(new FrameMsg_SelectPopupMenuItems(
       routing_id_, true, std::vector<int>()));
 }
 
-#endif
-
 void RenderFrameHostImpl::SetNavigationsSuspended(
     bool suspend,
     const base::TimeTicks& proceed_time) {
   // This should only be called to toggle the state.
   DCHECK(navigations_suspended_ != suspend);
 
   navigations_suspended_ = suspend;
   if (navigations_suspended_) {
diff --git a/content/browser/frame_host/render_frame_host_impl.h b/content/browser/frame_host/render_frame_host_impl.h
--- a/content/browser/frame_host/render_frame_host_impl.h
+++ b/content/browser/frame_host/render_frame_host_impl.h
@@ -38,19 +38,17 @@
 
 class GURL;
 struct AccessibilityHostMsg_EventParams;
 struct AccessibilityHostMsg_FindInPageResultParams;
 struct AccessibilityHostMsg_LocationChangeParams;
 struct FrameHostMsg_DidFailProvisionalLoadWithError_Params;
 struct FrameHostMsg_OpenURL_Params;
 struct FrameMsg_TextTrackSettings_Params;
-#if defined(OS_MACOSX) || defined(OS_ANDROID)
 struct FrameHostMsg_ShowPopup_Params;
-#endif
 
 namespace base {
 class FilePath;
 class ListValue;
 }
 
 namespace content {
 
@@ -431,20 +429,19 @@ class CONTENT_EXPORT RenderFrameHostImpl
 #if defined(OS_WIN)
   void SetParentNativeViewAccessible(
       gfx::NativeViewAccessible accessible_parent);
   gfx::NativeViewAccessible GetParentNativeViewAccessible() const;
 #elif defined(OS_MACOSX)
   // Select popup menu related methods (for external popup menus).
   void DidSelectPopupMenuItem(int selected_index);
   void DidCancelPopupMenu();
-#elif defined(OS_ANDROID)
+#endif
   void DidSelectPopupMenuItems(const std::vector<int>& selected_indices);
   void DidCancelPopupMenu();
-#endif
 
   // PlzNavigate: Indicates that a navigation is ready to commit and can be
   // handled by this RenderFrame.
   void CommitNavigation(ResourceResponse* response,
                         scoped_ptr<StreamHandle> body,
                         const CommonNavigationParams& common_params,
                         const RequestNavigationParams& request_params);
 
@@ -559,20 +556,18 @@ class CONTENT_EXPORT RenderFrameHostImpl
   void OnAccessibilitySnapshotResponse(
       int callback_id,
       const ui::AXTreeUpdate<AXContentNodeData>& snapshot);
   void OnToggleFullscreen(bool enter_fullscreen);
   void OnDidStartLoading(bool to_different_document);
   void OnDidStopLoading();
   void OnDidChangeLoadProgress(double load_progress);
 
-#if defined(OS_MACOSX) || defined(OS_ANDROID)
   void OnShowPopup(const FrameHostMsg_ShowPopup_Params& params);
   void OnHidePopup();
-#endif
 
   // Registers Mojo services that this frame host makes available.
   void RegisterMojoServices();
 
   // Updates the state of this RenderFrameHost and clears any waiting state
   // that is no longer relevant.
   void SetState(RenderFrameHostImplState rfh_state);
 
diff --git a/content/browser/renderer_host/render_view_host_delegate_view.h b/content/browser/renderer_host/render_view_host_delegate_view.h
--- a/content/browser/renderer_host/render_view_host_delegate_view.h
+++ b/content/browser/renderer_host/render_view_host_delegate_view.h
@@ -60,32 +60,30 @@ class CONTENT_EXPORT RenderViewHostDeleg
   // Notification that view for this delegate got the focus.
   virtual void GotFocus() {}
 
   // Callback to inform the browser that the page is returning the focus to
   // the browser's chrome. If reverse is true, it means the focus was
   // retrieved by doing a Shift-Tab.
   virtual void TakeFocus(bool reverse) {}
 
-#if defined(OS_MACOSX) || defined(OS_ANDROID)
   // Shows a popup menu with the specified items.
   // This method should call RenderFrameHost::DidSelectPopupMenuItem[s]() or
   // RenderFrameHost::DidCancelPopupMenu() based on the user action.
   virtual void ShowPopupMenu(RenderFrameHost* render_frame_host,
                              const gfx::Rect& bounds,
                              int item_height,
                              double item_font_size,
                              int selected_item,
                              const std::vector<MenuItem>& items,
                              bool right_aligned,
                              bool allow_multiple_selection) {};
 
   // Hides a popup menu opened by ShowPopupMenu().
   virtual void HidePopupMenu() {};
-#endif
 
 #if defined(USE_AURA)
   // Shows a Link Disambiguation Popup. |target_rect| is the area the user
   // touched that resulted in ambiguity, in DIPs in the host's coordinate
   // system, |zoomed_bitmap| is an enlarged image of that |target_rect|, and
   // |callback| is for forwarding on to the original scale web content.
   virtual void ShowDisambiguationPopup(
       const gfx::Rect& target_rect,
diff --git a/content/common/frame_messages.h b/content/common/frame_messages.h
--- a/content/common/frame_messages.h
+++ b/content/common/frame_messages.h
@@ -376,17 +376,16 @@ IPC_STRUCT_BEGIN(FrameMsg_TextTrackSetti
 
   // Text shadow (edge style) of the text track text.
   IPC_STRUCT_MEMBER(std::string, text_track_text_shadow)
 
   // Size of the text track text.
   IPC_STRUCT_MEMBER(std::string, text_track_text_size)
 IPC_STRUCT_END()
 
-#if defined(OS_MACOSX) || defined(OS_ANDROID)
 // This message is used for supporting popup menus on Mac OS X and Android using
 // native controls. See the FrameHostMsg_ShowPopup message.
 IPC_STRUCT_BEGIN(FrameHostMsg_ShowPopup_Params)
   // Position on the screen.
   IPC_STRUCT_MEMBER(gfx::Rect, bounds)
 
   // The height of each item in the menu.
   IPC_STRUCT_MEMBER(int, item_height)
@@ -401,17 +400,16 @@ IPC_STRUCT_BEGIN(FrameHostMsg_ShowPopup_
   IPC_STRUCT_MEMBER(std::vector<content::MenuItem>, popup_items)
 
   // Whether items should be right-aligned.
   IPC_STRUCT_MEMBER(bool, right_aligned)
 
   // Whether this is a multi-select popup.
   IPC_STRUCT_MEMBER(bool, allow_multiple_selection)
 IPC_STRUCT_END()
-#endif
 
 // -----------------------------------------------------------------------------
 // Messages sent from the browser to the renderer.
 
 // Notifies the embedding frame that a new CompositorFrame is ready to be
 // presented. When the frame finishes presenting, a matching
 // FrameHostMsg_CompositorFrameSwappedACK should be sent back to the
 // RenderViewHost that was produced the CompositorFrame.
@@ -602,24 +600,22 @@ IPC_MESSAGE_ROUTED1(FrameMsg_DidUpdateOr
 // Send to the RenderFrame to set text tracks state and style settings.
 // Sent for top-level frames.
 IPC_MESSAGE_ROUTED1(FrameMsg_SetTextTrackSettings,
                     FrameMsg_TextTrackSettings_Params /* params */)
 
 // Posts a message from a frame in another process to the current renderer.
 IPC_MESSAGE_ROUTED1(FrameMsg_PostMessageEvent, FrameMsg_PostMessage_Params)
 
-#if defined(OS_ANDROID)
-
 // External popup menus.
 IPC_MESSAGE_ROUTED2(FrameMsg_SelectPopupMenuItems,
                     bool /* user canceled the popup */,
                     std::vector<int> /* selected indices */)
 
-#elif defined(OS_MACOSX)
+#if defined(OS_MACOSX)
 
 // External popup menus.
 IPC_MESSAGE_ROUTED1(FrameMsg_SelectPopupMenuItem,
                     int /* selected index, -1 means no selection */)
 
 #endif
 
 // PlzNavigate
@@ -1013,16 +1009,12 @@ IPC_MESSAGE_ROUTED1(FrameHostMsg_ToggleF
 // out-of-process parent frame.
 IPC_MESSAGE_ROUTED0(FrameHostMsg_DispatchLoad)
 
 // Sent to the browser from a frame proxy to post a message to the frame's
 // active renderer.
 IPC_MESSAGE_ROUTED1(FrameHostMsg_RouteMessageEvent,
                     FrameMsg_PostMessage_Params)
 
-#if defined(OS_MACOSX) || defined(OS_ANDROID)
-
 // Message to show/hide a popup menu using native controls.
 IPC_MESSAGE_ROUTED1(FrameHostMsg_ShowPopup,
                     FrameHostMsg_ShowPopup_Params)
 IPC_MESSAGE_ROUTED0(FrameHostMsg_HidePopup)
-
-#endif
diff --git a/content/content_renderer.gypi b/content/content_renderer.gypi
--- a/content/content_renderer.gypi
+++ b/content/content_renderer.gypi
@@ -163,16 +163,18 @@
       'renderer/dom_storage/dom_storage_dispatcher.h',
       'renderer/dom_storage/dom_storage_proxy.h',
       'renderer/dom_storage/webstoragearea_impl.cc',
       'renderer/dom_storage/webstoragearea_impl.h',
       'renderer/dom_storage/webstoragenamespace_impl.cc',
       'renderer/dom_storage/webstoragenamespace_impl.h',
       'renderer/drop_data_builder.cc',
       'renderer/drop_data_builder.h',
+      'renderer/external_popup_menu.cc',
+      'renderer/external_popup_menu.h',
       'renderer/fetchers/manifest_fetcher.cc',
       'renderer/fetchers/manifest_fetcher.h',
       'renderer/fetchers/multi_resolution_image_resource_fetcher.cc',
       'renderer/fetchers/multi_resolution_image_resource_fetcher.h',
       'renderer/fetchers/resource_fetcher_impl.cc',
       'renderer/fetchers/resource_fetcher_impl.h',
       'renderer/fetchers/web_url_loader_client_impl.cc',
       'renderer/fetchers/web_url_loader_client_impl.h',
diff --git a/content/renderer/external_popup_menu.cc b/content/renderer/external_popup_menu.cc
--- a/content/renderer/external_popup_menu.cc
+++ b/content/renderer/external_popup_menu.cc
@@ -66,21 +66,19 @@ void ExternalPopupMenu::DidSelectItem(in
     return;
   if (index == -1)
     popup_menu_client_->didCancel();
   else
     popup_menu_client_->didAcceptIndex(index);
 }
 #endif
 
-#if defined(OS_ANDROID)
 void ExternalPopupMenu::DidSelectItems(bool canceled,
                                        const std::vector<int>& indices) {
   if (!popup_menu_client_)
     return;
   if (canceled)
     popup_menu_client_->didCancel();
   else
     popup_menu_client_->didAcceptIndices(indices);
 }
-#endif
 
 }  // namespace content
diff --git a/content/renderer/external_popup_menu.h b/content/renderer/external_popup_menu.h
--- a/content/renderer/external_popup_menu.h
+++ b/content/renderer/external_popup_menu.h
@@ -31,20 +31,18 @@ class ExternalPopupMenu : public blink::
       float scale, const gfx::PointF& offset);
 
 #if defined(OS_MACOSX)
   // Called when the user has selected an item. |selected_item| is -1 if the
   // user canceled the popup.
   void DidSelectItem(int selected_index);
 #endif
 
-#if defined(OS_ANDROID)
   // Called when the user has selected items or canceled the popup.
   void DidSelectItems(bool canceled, const std::vector<int>& selected_indices);
-#endif
 
   // blink::WebExternalPopupMenu implementation:
   virtual void show(const blink::WebRect& bounds);
   virtual void close();
 
  private:
   RenderFrameImpl* render_frame_;
   blink::WebPopupMenuInfo popup_menu_info_;
diff --git a/content/renderer/render_frame_impl.cc b/content/renderer/render_frame_impl.cc
--- a/content/renderer/render_frame_impl.cc
+++ b/content/renderer/render_frame_impl.cc
@@ -984,23 +984,21 @@ bool RenderFrameImpl::Send(IPC::Message*
       delete message;
       return false;
     }
   }
 
   return RenderThread::Get()->Send(message);
 }
 
-#if defined(OS_MACOSX) || defined(OS_ANDROID)
 void RenderFrameImpl::DidHideExternalPopupMenu() {
   // We need to clear external_popup_menu_ as soon as ExternalPopupMenu::close
   // is called. Otherwise, createExternalPopupMenu() for new popup will fail.
   external_popup_menu_.reset();
 }
-#endif
 
 bool RenderFrameImpl::OnMessageReceived(const IPC::Message& msg) {
   // We may get here while detaching, when the WebFrame has been deleted.  Do
   // not process any messages in this state.
   if (!frame_)
     return false;
 
   // TODO(kenrb): document() should not be null, but as a transitional step
@@ -1070,19 +1068,18 @@ bool RenderFrameImpl::OnMessageReceived(
                         OnSnapshotAccessibilityTree)
     IPC_MESSAGE_HANDLER(FrameMsg_DisownOpener, OnDisownOpener)
     IPC_MESSAGE_HANDLER(FrameMsg_CommitNavigation, OnCommitNavigation)
     IPC_MESSAGE_HANDLER(FrameMsg_DidUpdateSandboxFlags, OnDidUpdateSandboxFlags)
     IPC_MESSAGE_HANDLER(FrameMsg_SetTextTrackSettings,
                         OnTextTrackSettingsChanged)
     IPC_MESSAGE_HANDLER(FrameMsg_PostMessageEvent, OnPostMessageEvent)
     IPC_MESSAGE_HANDLER(FrameMsg_FailedNavigation, OnFailedNavigation)
-#if defined(OS_ANDROID)
     IPC_MESSAGE_HANDLER(FrameMsg_SelectPopupMenuItems, OnSelectPopupMenuItems)
-#elif defined(OS_MACOSX)
+#if defined(OS_MACOSX)
     IPC_MESSAGE_HANDLER(FrameMsg_SelectPopupMenuItem, OnSelectPopupMenuItem)
     IPC_MESSAGE_HANDLER(InputMsg_CopyToFindPboard, OnCopyToFindPboard)
 #endif
   IPC_END_MESSAGE_MAP()
 
   return handled;
 }
 
@@ -1711,31 +1708,29 @@ void RenderFrameImpl::OnPostMessageEvent
   WebSecurityOrigin target_origin;
   if (!params.target_origin.empty()) {
     target_origin =
         WebSecurityOrigin::createFromString(WebString(params.target_origin));
   }
   frame_->dispatchMessageEventWithOriginCheck(target_origin, msg_event);
 }
 
-#if defined(OS_ANDROID)
 void RenderFrameImpl::OnSelectPopupMenuItems(
     bool canceled,
     const std::vector<int>& selected_indices) {
   // It is possible to receive more than one of these calls if the user presses
   // a select faster than it takes for the show-select-popup IPC message to make
   // it to the browser UI thread. Ignore the extra-messages.
   // TODO(jcivelli): http:/b/5793321 Implement a better fix, as detailed in bug.
   if (!external_popup_menu_)
     return;
 
   external_popup_menu_->DidSelectItems(canceled, selected_indices);
   external_popup_menu_.reset();
 }
-#endif
 
 #if defined(OS_MACOSX)
 void RenderFrameImpl::OnSelectPopupMenuItem(int selected_index) {
   if (external_popup_menu_ == NULL)
     return;
   external_popup_menu_->DidSelectItem(selected_index);
   external_popup_menu_.reset();
 }
@@ -2089,17 +2084,17 @@ RenderFrameImpl::createWorkerContentSett
   DCHECK(!frame_ || frame_ == frame);
   return GetContentClient()->renderer()->CreateWorkerContentSettingsClientProxy(
       this, frame);
 }
 
 WebExternalPopupMenu* RenderFrameImpl::createExternalPopupMenu(
     const WebPopupMenuInfo& popup_menu_info,
     WebExternalPopupMenuClient* popup_menu_client) {
-#if defined(OS_MACOSX) || defined(OS_ANDROID)
+#if 1
   // An IPC message is sent to the browser to build and display the actual
   // popup. The user could have time to click a different select by the time
   // the popup is shown. In that case external_popup_menu_ is non NULL.
   // By returning NULL in that case, we instruct Blink to cancel that new
   // popup. So from the user perspective, only the first one will show, and
   // will have to close the first one before another one can be shown.
   if (external_popup_menu_)
     return NULL;
diff --git a/content/renderer/render_frame_impl.h b/content/renderer/render_frame_impl.h
--- a/content/renderer/render_frame_impl.h
+++ b/content/renderer/render_frame_impl.h
@@ -300,19 +300,17 @@ class CONTENT_EXPORT RenderFrameImpl
                                const gfx::Range& replacement_range,
                                bool keep_selection);
 #endif  // defined(ENABLE_PLUGINS)
 
   // May return NULL in some cases, especially if userMediaClient() returns
   // NULL.
   MediaStreamDispatcher* GetMediaStreamDispatcher();
 
-#if defined(OS_MACOSX) || defined(OS_ANDROID)
   void DidHideExternalPopupMenu();
-#endif
 
   // IPC::Sender
   bool Send(IPC::Message* msg) override;
 
   // IPC::Listener
   bool OnMessageReceived(const IPC::Message& msg) override;
 
   // RenderFrame implementation:
@@ -679,20 +677,19 @@ class CONTENT_EXPORT RenderFrameImpl
   void OnTextSurroundingSelectionRequest(size_t max_length);
   void OnSetAccessibilityMode(AccessibilityMode new_mode);
   void OnSnapshotAccessibilityTree(int callback_id);
   void OnDisownOpener();
   void OnDidUpdateSandboxFlags(blink::WebSandboxFlags flags);
   void OnTextTrackSettingsChanged(
       const FrameMsg_TextTrackSettings_Params& params);
   void OnPostMessageEvent(const FrameMsg_PostMessage_Params& params);
-#if defined(OS_ANDROID)
   void OnSelectPopupMenuItems(bool canceled,
                               const std::vector<int>& selected_indices);
-#elif defined(OS_MACOSX)
+#if defined(OS_MACOSX)
   void OnSelectPopupMenuItem(int selected_index);
   void OnCopyToFindPboard();
 #endif
 
   void OnCommitNavigation(const ResourceResponseHead& response,
                           const GURL& stream_url,
                           const CommonNavigationParams& common_params,
                           const RequestNavigationParams& request_params);
@@ -1018,20 +1015,18 @@ class CONTENT_EXPORT RenderFrameImpl
 
   scoped_ptr<blink::WebUSBClient> usb_client_;
 
 #if defined(ENABLE_WEBVR)
   // The VR dispatcher attached to the frame, lazily initialized.
   scoped_ptr<VRDispatcher> vr_dispatcher_;
 #endif
 
-#if defined(OS_MACOSX) || defined(OS_ANDROID)
   // The external popup for the currently showing select popup.
   scoped_ptr<ExternalPopupMenu> external_popup_menu_;
-#endif
 
   base::WeakPtrFactory<RenderFrameImpl> weak_factory_;
 
   DISALLOW_COPY_AND_ASSIGN(RenderFrameImpl);
 };
 
 }  // namespace content
 
diff --git a/content/renderer/render_thread_impl.cc b/content/renderer/render_thread_impl.cc
--- a/content/renderer/render_thread_impl.cc
+++ b/content/renderer/render_thread_impl.cc
@@ -545,20 +545,18 @@ RenderThreadImpl::RenderThreadImpl(
 
 void RenderThreadImpl::Init() {
   TRACE_EVENT_BEGIN_ETW("RenderThreadImpl::Init", 0, "");
 
   base::trace_event::TraceLog::GetInstance()->SetThreadSortIndex(
       base::PlatformThread::CurrentId(),
       kTraceEventRendererMainThreadSortIndex);
 
-#if defined(OS_MACOSX) || defined(OS_ANDROID)
   // On Mac and Android, the select popups are rendered by the browser.
   blink::WebView::setUseExternalPopupMenus(true);
-#endif
 
   lazy_tls.Pointer()->Set(this);
 
   // Register this object as the main thread.
   ChildProcess::current()->set_main_thread(this);
 
   // In single process the single process is all there is.
   notify_webkit_of_modal_loop_ = true;
diff --git a/content/renderer/render_widget.cc b/content/renderer/render_widget.cc
--- a/content/renderer/render_widget.cc
+++ b/content/renderer/render_widget.cc
@@ -696,23 +696,21 @@ gfx::Rect RenderWidget::AdjustValidation
 
 void RenderWidget::SetScreenMetricsEmulationParameters(
     bool enabled,
     const blink::WebDeviceEmulationParams& params) {
   // This is only supported in RenderView.
   NOTREACHED();
 }
 
-#if defined(OS_MACOSX) || defined(OS_ANDROID)
 void RenderWidget::SetExternalPopupOriginAdjustmentsForEmulation(
     ExternalPopupMenu* popup, ScreenMetricsEmulator* emulator) {
   popup->SetOriginScaleAndOffsetForEmulation(
       emulator->scale(), emulator->offset());
 }
-#endif
 
 void RenderWidget::OnShowHostContextMenu(ContextMenuParams* params) {
   if (screen_metrics_emulator_)
     screen_metrics_emulator_->OnShowContextMenu(params);
 }
 
 bool RenderWidget::OnMessageReceived(const IPC::Message& message) {
   bool handled = true;
diff --git a/content/renderer/render_widget.h b/content/renderer/render_widget.h
--- a/content/renderer/render_widget.h
+++ b/content/renderer/render_widget.h
@@ -406,20 +406,18 @@ class CONTENT_EXPORT RenderWidget
               bool is_fullscreen_granted,
               blink::WebDisplayMode display_mode,
               ResizeAck resize_ack);
   // Used to force the size of a window when running layout tests.
   void SetWindowRectSynchronously(const gfx::Rect& new_window_rect);
   virtual void SetScreenMetricsEmulationParameters(
       bool enabled,
       const blink::WebDeviceEmulationParams& params);
-#if defined(OS_MACOSX) || defined(OS_ANDROID)
   void SetExternalPopupOriginAdjustmentsForEmulation(
       ExternalPopupMenu* popup, ScreenMetricsEmulator* emulator);
-#endif
 
   // RenderWidget IPC message handlers
   void OnHandleInputEvent(const blink::WebInputEvent* event,
                           const ui::LatencyInfo& latency_info,
                           bool keyboard_shortcut);
   void OnCursorVisibilityChange(bool is_visible);
   void OnMouseCaptureLost();
   virtual void OnSetFocus(bool enable);
