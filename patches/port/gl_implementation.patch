# Description: Build our own GL implementation that gives us greater
#  control over the allowed and preferred implementation. Also build
#  the GLX implementation, and allow Oxide to provide a display handle
# Author: Chris Coulson <chris.coulson@canonical.com>

diff --git a/build/linux/system.gyp b/build/linux/system.gyp
--- a/build/linux/system.gyp
+++ b/build/linux/system.gyp
@@ -194,17 +194,17 @@
                   '<!@(<(pkg-config) --libs-only-l gtk+-unix-print-2.0)',
                 ],
               },
             }],
           ],
         },
       ],  # targets
     }],
-    [ 'use_x11==1 or ozone_platform_ozonex==1', {
+    [ 'OS == "linux"', {
       # Hide X11 and related dependencies when use_x11=0
       'targets': [
         {
           'target_name': 'x11',
           'type': 'none',
           'toolsets': ['host', 'target'],
           'conditions': [
             ['_toolset=="target"', {
diff --git a/ui/gfx/gfx.gyp b/ui/gfx/gfx.gyp
--- a/ui/gfx/gfx.gyp
+++ b/ui/gfx/gfx.gyp
@@ -58,16 +58,18 @@
         'geometry/vector2d.cc',
         'geometry/vector2d.h',
         'geometry/vector2d_conversions.cc',
         'geometry/vector2d_conversions.h',
         'geometry/vector2d_f.cc',
         'geometry/vector2d_f.h',
         'geometry/vector3d_f.cc',
         'geometry/vector3d_f.h',
+        '<(DEPTH)/../../../shared/port/gfx/gfx_utils_oxide.cc',
+        '<(DEPTH)/../../../shared/port/gfx/gfx_utils_oxide.h',
       ],
       'includes': [
         '../../build/android/increase_size_for_speed.gypi',
       ],
     },
     {
       'target_name': 'gfx',
       'type': '<(component)',
@@ -392,17 +394,17 @@
             'harfbuzz_font_skia.h',
             'render_text.cc',
             'render_text.h',
             'render_text_harfbuzz.cc',
             'render_text_harfbuzz.h',
             'text_utils_skia.cc',
           ],
         }],
-        ['use_x11==1', {
+        ['OS=="linux"', {
           'dependencies': [
             '../../build/linux/system.gyp:x11',
             'x/gfx_x11.gyp:gfx_x11',
           ],
         }],
         ['use_cairo==1', {
           'dependencies': [
             '<(DEPTH)/build/linux/system.gyp:pangocairo',
diff --git a/ui/gl/gl.gyp b/ui/gl/gl.gyp
--- a/ui/gl/gl.gyp
+++ b/ui/gl/gl.gyp
@@ -22,16 +22,17 @@
         '<(DEPTH)/ui/gfx/gfx.gyp:gfx_geometry',
       ],
       'defines': [
         'GL_IMPLEMENTATION',
       ],
       'include_dirs': [
         '<(DEPTH)/third_party/swiftshader/include',
         '<(DEPTH)/third_party/khronos',
+        '<(DEPTH)/../../..',
       ],
       'export_dependent_settings': [
         '<(DEPTH)/third_party/mesa/mesa.gyp:mesa_headers',
       ],
       'sources': [
         'android/gl_jni_registrar.cc',
         'android/gl_jni_registrar.h',
         'android/scoped_java_surface.cc',
@@ -49,17 +50,17 @@
         'gl_bindings_skia_in_process.cc',
         'gl_bindings_skia_in_process.h',
         'gl_context.cc',
         'gl_context.h',
         'gl_context_android.cc',
         'gl_context_mac.mm',
         'gl_context_osmesa.cc',
         'gl_context_osmesa.h',
-        'gl_context_ozone.cc',
+        #'gl_context_ozone.cc',
         'gl_context_stub.cc',
         'gl_context_stub.h',
         'gl_context_stub_with_extensions.cc',
         'gl_context_stub_with_extensions.h',
         'gl_context_win.cc',
         'gl_context_x11.cc',
         'gl_enums.cc',
         'gl_enums.h',
@@ -81,32 +82,32 @@
         'gl_image_shared_memory.cc',
         'gl_image_shared_memory.h',
         'gl_image_stub.cc',
         'gl_image_stub.h',
         'gl_implementation.cc',
         'gl_implementation.h',
         'gl_implementation_android.cc',
         'gl_implementation_mac.cc',
-        'gl_implementation_ozone.cc',
+        #'gl_implementation_ozone.cc',
         'gl_implementation_win.cc',
         'gl_implementation_x11.cc',
         'gl_osmesa_api_implementation.cc',
         'gl_osmesa_api_implementation.h',
         'gl_share_group.cc',
         'gl_share_group.h',
         'gl_state_restorer.cc',
         'gl_state_restorer.h',
         'gl_surface.cc',
         'gl_surface.h',
         'gl_surface_android.cc',
         'gl_surface_mac.cc',
         'gl_surface_osmesa.cc',
         'gl_surface_osmesa.h',
-        'gl_surface_ozone.cc',
+        #'gl_surface_ozone.cc',
         'gl_surface_stub.cc',
         'gl_surface_stub.h',
         'gl_surface_win.cc',
         'gl_surface_x11.cc',
         'gl_switches.cc',
         'gl_switches.h',
         'gl_version_info.cc',
         'gl_version_info.h',
@@ -116,16 +117,19 @@
         'gpu_timing.cc',
         'gpu_timing.h',
         'scoped_binders.cc',
         'scoped_binders.h',
         'scoped_make_current.cc',
         'scoped_make_current.h',
         'sync_control_vsync_provider.cc',
         'sync_control_vsync_provider.h',
+        '<(DEPTH)/../../../shared/port/gl/gl_context_oxide_linux.cc',
+        '<(DEPTH)/../../../shared/port/gl/gl_implementation_oxide_linux.cc',
+        '<(DEPTH)/../../../shared/port/gl/gl_surface_oxide_linux.cc',
       ],
       'conditions': [
         ['OS in ("win", "android", "linux")', {
           'sources': [
             'egl_util.cc',
             'egl_util.h',
             'gl_bindings_autogen_egl.cc',
             'gl_bindings_autogen_egl.h',
@@ -151,28 +155,28 @@
           ],
         }],
         ['OS=="linux"', {
           'sources': [
             'gl_image_linux_dma_buffer.cc',
             'gl_image_linux_dma_buffer.h',
           ],
         }],
-        ['use_x11 == 1', {
+        ['OS=="linux"', {
           'sources': [
             'gl_bindings_autogen_glx.cc',
             'gl_bindings_autogen_glx.h',
             'gl_context_glx.cc',
             'gl_context_glx.h',
             'gl_egl_api_implementation.cc',
             'gl_egl_api_implementation.h',
             'gl_glx_api_implementation.cc',
             'gl_glx_api_implementation.h',
-            'gl_image_glx.cc',
-            'gl_image_glx.h',
+            #'gl_image_glx.cc',
+            #'gl_image_glx.h',
             'gl_surface_glx.cc',
             'gl_surface_glx.h',
           ],
           'all_dependent_settings': {
             'defines': [
               'GL_GLEXT_PROTOTYPES',
             ],
           },
diff --git a/ui/gl/gl_bindings.cc b/ui/gl/gl_bindings.cc
--- a/ui/gl/gl_bindings.cc
+++ b/ui/gl/gl_bindings.cc
@@ -3,17 +3,17 @@
 // found in the LICENSE file.
 
 #if defined(OS_WIN) || defined(USE_X11) || defined(OS_ANDROID) || defined(USE_OZONE)
 #include <EGL/egl.h>
 #endif
 
 #include "ui/gl/gl_bindings.h"
 
-#if defined(USE_X11)
+#if defined(OS_LINUX)
 #include "ui/gfx/x/x11_types.h"
 #endif
 
 #if defined(OS_WIN)
 #include "ui/gl/gl_surface_wgl.h"
 #endif
 
 #if defined(OS_WIN) || defined(USE_X11) || defined(OS_ANDROID) || defined(USE_OZONE)
@@ -54,17 +54,17 @@ std::string DriverEGL::GetPlatformExtens
 std::string DriverEGL::GetClientExtensions() {
   DCHECK(g_driver_egl.fn.eglQueryStringFn);
   const char* str =
       g_driver_egl.fn.eglQueryStringFn(EGL_NO_DISPLAY, EGL_EXTENSIONS);
   return str ? std::string(str) : "";
 }
 #endif
 
-#if defined(USE_X11)
+#if defined(OS_LINUX)
 std::string DriverGLX::GetPlatformExtensions() {
   DCHECK(g_driver_glx.fn.glXQueryExtensionsStringFn);
   const char* str =
       g_driver_glx.fn.glXQueryExtensionsStringFn(gfx::GetXDisplay(), 0);
   return str ? std::string(str) : "";
 }
 #endif
 
diff --git a/ui/gl/gl_bindings.h b/ui/gl/gl_bindings.h
--- a/ui/gl/gl_bindings.h
+++ b/ui/gl/gl_bindings.h
@@ -22,17 +22,17 @@
 #include "build/build_config.h"
 #include "ui/gl/gl_export.h"
 
 // The standard OpenGL native extension headers are also included.
 #if defined(OS_WIN)
 #include <GL/wglext.h>
 #elif defined(OS_MACOSX)
 #include <OpenGL/OpenGL.h>
-#elif defined(USE_X11)
+#elif defined(OS_LINUX)
 #include <GL/glx.h>
 #include <GL/glxext.h>
 
 // Undefine some macros defined by X headers. This is why this file should only
 // be included in .cc files.
 #undef Bool
 #undef None
 #undef Status
@@ -317,16 +317,19 @@ typedef uint64 EGLuint64CHROMIUM;
 #if defined(OS_WIN)
 #include "gl_bindings_autogen_egl.h"
 #include "gl_bindings_autogen_wgl.h"
 #elif defined(USE_X11)
 #include "gl_bindings_autogen_egl.h"
 #include "gl_bindings_autogen_glx.h"
 #elif defined(USE_OZONE)
 #include "gl_bindings_autogen_egl.h"
+#if defined(OS_LINUX)
+#include "gl_bindings_autogen_glx.h"
+#endif
 #elif defined(OS_ANDROID)
 #include "gl_bindings_autogen_egl.h"
 #endif
 
 namespace gfx {
 
 struct GL_EXPORT DriverGL {
   void InitializeStaticBindings();
@@ -387,17 +390,17 @@ struct GL_EXPORT DriverEGL {
   ExtensionsEGL ext;
 
  private:
   static std::string GetPlatformExtensions();
   static std::string GetClientExtensions();
 };
 #endif
 
-#if defined(USE_X11)
+#if defined(OS_LINUX)
 struct GL_EXPORT DriverGLX {
   void InitializeStaticBindings();
   void InitializeDebugBindings();
   void ClearBindings();
 
   ProcsGLX fn;
   ProcsGLX debug_fn;
   ExtensionsGLX ext;
@@ -429,16 +432,23 @@ GL_EXPORT extern GLXApi* g_current_glx_c
 GL_EXPORT extern DriverEGL g_driver_egl;
 GL_EXPORT extern DriverGLX g_driver_glx;
 
 #elif defined(USE_OZONE)
 
 GL_EXPORT extern EGLApi* g_current_egl_context;
 GL_EXPORT extern DriverEGL g_driver_egl;
 
+#if defined(OS_LINUX)
+
+GL_EXPORT extern GLXApi* g_current_glx_context;
+GL_EXPORT extern DriverGLX g_driver_glx;
+
+#endif
+
 #elif defined(OS_ANDROID)
 
 GL_EXPORT extern EGLApi* g_current_egl_context;
 GL_EXPORT extern DriverEGL g_driver_egl;
 
 #endif
 
 }  // namespace gfx
diff --git a/ui/gl/gl_implementation.cc b/ui/gl/gl_implementation.cc
--- a/ui/gl/gl_implementation.cc
+++ b/ui/gl/gl_implementation.cc
@@ -59,16 +59,19 @@ WGLApi* g_current_wgl_context;
 #elif defined(USE_X11)
 
 EGLApi* g_current_egl_context;
 GLXApi* g_current_glx_context;
 
 #elif defined(USE_OZONE)
 
 EGLApi* g_current_egl_context;
+#if defined(OS_LINUX)
+GLXApi* g_current_glx_context;
+#endif
 
 #elif defined(OS_ANDROID)
 
 EGLApi* g_current_egl_context;
 
 #endif
 
 GLImplementation GetNamedGLImplementation(const std::string& name) {
diff --git a/ui/gl/gl_surface_glx.cc b/ui/gl/gl_surface_glx.cc
--- a/ui/gl/gl_surface_glx.cc
+++ b/ui/gl/gl_surface_glx.cc
@@ -24,16 +24,18 @@ extern "C" {
 #include "base/trace_event/trace_event.h"
 #include "ui/events/platform/platform_event_source.h"
 #include "ui/gfx/x/x11_connection.h"
 #include "ui/gfx/x/x11_types.h"
 #include "ui/gl/gl_bindings.h"
 #include "ui/gl/gl_implementation.h"
 #include "ui/gl/sync_control_vsync_provider.h"
 
+#include "shared/port/gfx/gfx_utils_oxide.h"
+
 namespace gfx {
 
 namespace {
 
 Display* g_display = nullptr;
 const char* g_glx_extensions = nullptr;
 bool g_glx_context_create = false;
 bool g_glx_create_context_robustness_supported = false;
@@ -326,17 +328,17 @@ bool GLSurfaceGLX::InitializeOneOff() {
     return true;
 
   // http://crbug.com/245466
   setenv("force_s3tc_enable", "true", 1);
 
   // SGIVideoSyncProviderShim (if instantiated) will issue X commands on
   // it's own thread.
   gfx::InitializeThreadedX11();
-  g_display = gfx::GetXDisplay();
+  g_display = reinterpret_cast<XDisplay*>(GetOxideNativeDisplay());
 
   if (!g_display) {
     LOG(ERROR) << "XOpenDisplay failed.";
     return false;
   }
 
   int major, minor;
   if (!glXQueryVersion(g_display, &major, &minor)) {
@@ -454,16 +456,17 @@ void* GLSurfaceGLX::GetConfig(gfx::Accel
     }
   }
   if (found) {
     return configs.get()[i];
   }
   return nullptr;
 }
 
+#if 0
 NativeViewGLSurfaceGLX::NativeViewGLSurfaceGLX(gfx::AcceleratedWidget window)
     : parent_window_(window), window_(0), config_(nullptr) {
 }
 
 gfx::AcceleratedWidget NativeViewGLSurfaceGLX::GetDrawableHandle() const {
   return window_;
 }
 
@@ -576,16 +579,17 @@ bool NativeViewGLSurfaceGLX::PostSubBuff
 
 VSyncProvider* NativeViewGLSurfaceGLX::GetVSyncProvider() {
   return vsync_provider_.get();
 }
 
 NativeViewGLSurfaceGLX::~NativeViewGLSurfaceGLX() {
   Destroy();
 }
+#endif
 
 UnmappedNativeViewGLSurfaceGLX::UnmappedNativeViewGLSurfaceGLX(
     const gfx::Size& size)
     : size_(size), config_(nullptr), window_(0) {
   // Ensure that we don't create a window with zero size.
   if (size_.GetArea() == 0)
     size_.SetSize(1, 1);
 }
diff --git a/ui/gl/gl_surface_glx.h b/ui/gl/gl_surface_glx.h
--- a/ui/gl/gl_surface_glx.h
+++ b/ui/gl/gl_surface_glx.h
@@ -45,16 +45,17 @@ class GL_EXPORT GLSurfaceGLX : public GL
   ~GLSurfaceGLX() override;
 
   static void* GetConfig(gfx::AcceleratedWidget window);
 
  private:
   DISALLOW_COPY_AND_ASSIGN(GLSurfaceGLX);
 };
 
+#if 0
 // A surface used to render to a view.
 class GL_EXPORT NativeViewGLSurfaceGLX : public GLSurfaceGLX,
                                          public ui::PlatformEventDispatcher {
  public:
   explicit NativeViewGLSurfaceGLX(gfx::AcceleratedWidget window);
 
   // Implement GLSurfaceGLX.
   bool Initialize() override;
@@ -88,16 +89,17 @@ class GL_EXPORT NativeViewGLSurfaceGLX :
 
   void* config_;
   gfx::Size size_;
 
   scoped_ptr<VSyncProvider> vsync_provider_;
 
   DISALLOW_COPY_AND_ASSIGN(NativeViewGLSurfaceGLX);
 };
+#endif
 
 // A surface used to render to an offscreen pbuffer.
 class GL_EXPORT UnmappedNativeViewGLSurfaceGLX : public GLSurfaceGLX {
  public:
   explicit UnmappedNativeViewGLSurfaceGLX(const gfx::Size& size);
 
   // Implement GLSurfaceGLX.
   bool Initialize() override;
