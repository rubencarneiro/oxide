# Description: Make content::RenderViewObserver::FrameCreated() work correctly,
#  so that we can track frames in the browser process
# Author: Chris Coulson <chris.coulson@canonical.com>

diff --git a/content/renderer/render_frame_impl.cc b/content/renderer/render_frame_impl.cc
--- a/content/renderer/render_frame_impl.cc
+++ b/content/renderer/render_frame_impl.cc
@@ -239,16 +239,18 @@ blink::WebFrame* RenderFrameImpl::create
   blink::WebFrame* web_frame = WebFrame::create(child_render_frame,
                                                 child_frame_identifier);
 
   if (CommandLine::ForCurrentProcess()->HasSwitch(switches::kSitePerProcess)) {
     g_child_frame_map.Get().insert(
         std::make_pair(web_frame, child_render_frame));
   }
 
+  render_view_->FrameCreated(parent, web_frame);
+
   return web_frame;
 }
 
 void RenderFrameImpl::didDisownOpener(blink::WebFrame* frame) {
   render_view_->didDisownOpener(frame);
 }
 
 void RenderFrameImpl::frameDetached(blink::WebFrame* frame) {
diff --git a/content/renderer/render_view_impl.cc b/content/renderer/render_view_impl.cc
--- a/content/renderer/render_view_impl.cc
+++ b/content/renderer/render_view_impl.cc
@@ -4543,16 +4543,21 @@ void RenderViewImpl::DidPause(blink::Web
                                          player->hasAudio(),
                                          false));
 }
 
 void RenderViewImpl::PlayerGone(blink::WebMediaPlayer* player) {
   DidPause(player);
 }
 
+void RenderViewImpl::FrameCreated(blink::WebFrame* parent,
+                                  blink::WebFrame* frame) {
+  FOR_EACH_OBSERVER(RenderViewObserver, observers_, FrameCreated(parent, frame));
+}
+
 void RenderViewImpl::SyncNavigationState() {
   if (!webview())
     return;
 
   const WebHistoryItem& item = webview()->mainFrame()->currentHistoryItem();
   SendUpdateState(item);
 }
 
diff --git a/content/renderer/render_view_impl.h b/content/renderer/render_view_impl.h
--- a/content/renderer/render_view_impl.h
+++ b/content/renderer/render_view_impl.h
@@ -717,16 +717,18 @@ class CONTENT_EXPORT RenderViewImpl
   // appropriate section, add it there. If not, there are some random functions
   // nearer to the top you can add it to.
 
   // Cannot use std::set unfortunately since linked_ptr<> does not support
   // operator<.
   typedef std::vector<linked_ptr<ImageResourceFetcher> >
       ImageResourceFetcherList;
 
+  void FrameCreated(blink::WebFrame* parent, blink::WebFrame* frame);
+
  protected:
   // RenderWidget overrides:
   virtual void Close() OVERRIDE;
   virtual void OnResize(const ViewMsg_Resize_Params& params) OVERRIDE;
   virtual void DidInitiatePaint() OVERRIDE;
   virtual void DidFlushPaint() OVERRIDE;
   virtual PepperPluginInstanceImpl* GetBitmapForOptimizedPluginPaint(
       const gfx::Rect& paint_bounds,
