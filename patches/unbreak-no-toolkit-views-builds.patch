# HG changeset patch
# Parent 89ef9296a3ddb5b58454cebe9cf202dd25e1e13a
# User oxide

diff --git a/content/browser/renderer_host/render_widget_host_view_aura.cc b/content/browser/renderer_host/render_widget_host_view_aura.cc
--- a/content/browser/renderer_host/render_widget_host_view_aura.cc
+++ b/content/browser/renderer_host/render_widget_host_view_aura.cc
@@ -1227,16 +1227,17 @@ RenderWidgetHostViewAura::AccessibilityG
   return NULL;
 
 }
 
 gfx::GLSurfaceHandle RenderWidgetHostViewAura::GetCompositingSurface() {
   return ImageTransportFactory::GetInstance()->GetSharedSurfaceHandle();
 }
 
+#if defined(TOOLKIT_VIEWS)
 void RenderWidgetHostViewAura::ShowDisambiguationPopup(
     const gfx::Rect& rect_pixels,
     const SkBitmap& zoomed_bitmap) {
   // |target_rect| is provided in pixels, not DIPs. So we convert it to DIPs
   // by scaling it by the inverse of the device scale factor.
   gfx::RectF screen_target_rect_f(rect_pixels);
   screen_target_rect_f.Scale(1.0f / current_device_scale_factor_);
   disambiguation_target_rect_ = gfx::ToEnclosingRect(screen_target_rect_f);
@@ -1309,16 +1310,17 @@ void RenderWidgetHostViewAura::ProcessDi
   host_->ForwardGestureEvent(web_gesture);
 }
 
 void RenderWidgetHostViewAura::ProcessDisambiguationMouse(
     ui::MouseEvent* event) {
   blink::WebMouseEvent web_mouse = content::MakeWebMouseEvent(event);
   host_->ForwardMouseEvent(web_mouse);
 }
+#endif
 
 bool RenderWidgetHostViewAura::LockMouse() {
   aura::Window* root_window = window_->GetRootWindow();
   if (!root_window)
     return false;
 
   if (mouse_locked_)
     return true;
@@ -1926,19 +1928,21 @@ void RenderWidgetHostViewAura::OnMouseEv
     if (host) {
       HWND parent = host->GetAcceleratedWidget();
       HWND toplevel_hwnd = ::GetAncestor(parent, GA_ROOT);
       EnumThreadWindows(GetCurrentThreadId(),
                         DismissOwnedPopups,
                         reinterpret_cast<LPARAM>(toplevel_hwnd));
     }
 #endif
+#if defined(TOOLKIT_VIEWS)
     // The Disambiguation popup does not parent itself from this window, so we
     // manually dismiss it.
     HideDisambiguationPopup();
+#endif
 
     blink::WebMouseWheelEvent mouse_wheel_event =
         MakeWebMouseWheelEvent(static_cast<ui::MouseWheelEvent*>(event));
     if (mouse_wheel_event.deltaX != 0 || mouse_wheel_event.deltaY != 0)
       host_->ForwardWheelEvent(mouse_wheel_event);
   } else if (CanRendererHandleEvent(event) &&
              !(event->flags() & ui::EF_FROM_TOUCH)) {
     blink::WebMouseEvent mouse_event = MakeWebMouseEvent(event);
diff --git a/content/browser/renderer_host/render_widget_host_view_aura.h b/content/browser/renderer_host/render_widget_host_view_aura.h
--- a/content/browser/renderer_host/render_widget_host_view_aura.h
+++ b/content/browser/renderer_host/render_widget_host_view_aura.h
@@ -222,18 +222,20 @@ class CONTENT_EXPORT RenderWidgetHostVie
   virtual InputEventAckState FilterInputEvent(
       const blink::WebInputEvent& input_event) OVERRIDE;
   virtual gfx::GLSurfaceHandle GetCompositingSurface() OVERRIDE;
   virtual BrowserAccessibilityManager* CreateBrowserAccessibilityManager(
       BrowserAccessibilityDelegate* delegate) OVERRIDE;
   virtual gfx::AcceleratedWidget AccessibilityGetAcceleratedWidget() OVERRIDE;
   virtual gfx::NativeViewAccessible AccessibilityGetNativeViewAccessible()
       OVERRIDE;
+#if defined(TOOLKIT_VIEWS)
   virtual void ShowDisambiguationPopup(const gfx::Rect& rect_pixels,
                                        const SkBitmap& zoomed_bitmap) OVERRIDE;
+#endif
   virtual bool LockMouse() OVERRIDE;
   virtual void UnlockMouse() OVERRIDE;
   virtual void OnSwapCompositorFrame(
       uint32 output_surface_id,
       scoped_ptr<cc::CompositorFrame> frame) OVERRIDE;
   virtual void DidStopFlinging() OVERRIDE;
 
 #if defined(OS_WIN)
@@ -334,23 +336,25 @@ class CONTENT_EXPORT RenderWidgetHostVie
 
   // Updates the cursor clip region. Used for mouse locking.
   void UpdateMouseLockRegion();
 
   // Notification that the LegacyRenderWidgetHostHWND was destroyed.
   void OnLegacyWindowDestroyed();
 #endif
 
+#if defined(TOOLKIT_VIEWS)
   void DisambiguationPopupRendered(bool success, const SkBitmap& result);
 
   void HideDisambiguationPopup();
 
   void ProcessDisambiguationGesture(ui::GestureEvent* event);
 
   void ProcessDisambiguationMouse(ui::MouseEvent* event);
+#endif
 
   // Method to indicate if this instance is shutting down or closing.
   // TODO(shrikant): Discuss around to see if it makes sense to add this method
   // as part of RenderWidgetHostView.
   bool IsClosing() const { return in_shutdown_; }
 
   // Sets whether the overscroll controller should be enabled for this page.
   void SetOverscrollControllerEnabled(bool enabled);
