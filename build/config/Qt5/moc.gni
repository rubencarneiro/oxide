# vim:expandtab:shiftwidth=2:tabstop=2:

# Copyright (C) 2016 Canonical Ltd.

# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.

# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

declare_args() {
  qt_moc_executable = false
}

assert(qt_moc_executable != false, "qt_moc_executable must be defined by CMake")

moc_script = "//oxide/build/config/Qt5/moc.py"

template("moc_action_foreach") {
  action_foreach(target_name) {
    script = "$moc_script"
    sources = invoker.sources

    output = "${root_gen_dir}/{{source_root_relative_dir}}/${invoker.output_prefix}{{source_name_part}}.${invoker.output_extension}"
    outputs = [ output ]

    args = [
      "-m", "$qt_moc_executable", "{{source}}", rebase_path("$output", "", ".")
    ]
  }
}

template("qtmoc") {
  assert(defined(invoker.sources))

  foreach(source, invoker.sources) {
    ext = get_path_info(source, "extension")
    if (ext == "cc") {
      if (!defined(sources_cc)) {
        sources_cc = []
      }
      sources_cc += [ source ]
    } else {
      assert(ext == "h")
      if (!defined(sources_h)) {
        sources_h = []
      }
      sources_h += [ source ]
    }
  }

  targets = []

  if (defined(sources_cc)) {
    name = "${target_name}_cc"
    targets += [ ":${name}" ]
    moc_action_foreach(name) {
      sources = sources_cc
      output_prefix = ""
      output_extension = "moc"
    }
  }

  if (defined(sources_h)) {
    name = "${target_name}_h"
    targets += [ ":${name}" ]
    moc_action_foreach(name) {
      sources = sources_h
      output_prefix = "moc_"
      output_extension = "cc"
    }
  }

  group(target_name) {
    forward_variables_from(invoker, [ "visibility" ])
    public_deps = targets
  }
}
